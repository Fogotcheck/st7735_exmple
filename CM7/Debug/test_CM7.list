
test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000081b8  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122f8  080122f8  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  080122f8  080122f8  000222f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012300  08012300  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012300  08012300  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012304  08012304  00022304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08012390  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  080123f0  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004c9c  24000148  08012450  00030148  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24004de4  08012450  00034de4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a015  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043e5  00000000  00000000  0005a18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d08  00000000  00000000  0005e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001b90  00000000  00000000  00060278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d61a  00000000  00000000  00061e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000223f9  00000000  00000000  0009f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00198a5b  00000000  00000000  000c181b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0025a276  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007fac  00000000  00000000  0025a2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a128 	.word	0x0800a128

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800a128 	.word	0x0800a128

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071a:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 800071c:	bf00      	nop
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <main+0xe0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d004      	beq.n	8000734 <main+0x24>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	1e5a      	subs	r2, r3, #1
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dcf4      	bgt.n	800071e <main+0xe>
		;
	if (timeout < 0) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	da01      	bge.n	800073e <main+0x2e>
		Error_Handler();
 800073a:	f000 fb23 	bl	8000d84 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800073e:	f000 ff89 	bl	8001654 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000742:	f000 f869 	bl	8000818 <SystemClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <main+0xe0>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	4a28      	ldr	r2, [pc, #160]	; (80007f0 <main+0xe0>)
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <main+0xe0>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fefd 	bl	8002564 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 800076a:	2100      	movs	r1, #0
 800076c:	2000      	movs	r0, #0
 800076e:	f001 ff13 	bl	8002598 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000778:	bf00      	nop
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <main+0xe0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d104      	bne.n	8000790 <main+0x80>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dcf4      	bgt.n	800077a <main+0x6a>
		;
	if (timeout < 0) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	da01      	bge.n	800079a <main+0x8a>
		Error_Handler();
 8000796:	f000 faf5 	bl	8000d84 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800079a:	f000 f9a7 	bl	8000aec <MX_GPIO_Init>
	MX_ETH_Init();
 800079e:	f000 f8b7 	bl	8000910 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80007a2:	f000 f957 	bl	8000a54 <MX_USART3_UART_Init>
	MX_SPI1_Init();
 80007a6:	f000 f8ff 	bl	80009a8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	ST7735_Init();
 80007aa:	f000 fe3d 	bl	8001428 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f000 fec8 	bl	8001544 <ST7735_FillScreen>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80007b4:	f006 fe3c 	bl	8007430 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <main+0xe4>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	480e      	ldr	r0, [pc, #56]	; (80007f8 <main+0xe8>)
 80007be:	f006 fe81 	bl	80074c4 <osThreadNew>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <main+0xec>)
 80007c6:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of myTask02 */
	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <main+0xf0>)
 80007ca:	2100      	movs	r1, #0
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <main+0xf4>)
 80007ce:	f006 fe79 	bl	80074c4 <osThreadNew>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <main+0xf8>)
 80007d6:	6013      	str	r3, [r2, #0]

	/* creation of myTask03 */
	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <main+0xfc>)
 80007da:	2100      	movs	r1, #0
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <main+0x100>)
 80007de:	f006 fe71 	bl	80074c4 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <main+0x104>)
 80007e6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80007e8:	f006 fe46 	bl	8007478 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80007ec:	e7fe      	b.n	80007ec <main+0xdc>
 80007ee:	bf00      	nop
 80007f0:	58024400 	.word	0x58024400
 80007f4:	0801218c 	.word	0x0801218c
 80007f8:	08000cd9 	.word	0x08000cd9
 80007fc:	24000368 	.word	0x24000368
 8000800:	080121b0 	.word	0x080121b0
 8000804:	08000d0d 	.word	0x08000d0d
 8000808:	2400036c 	.word	0x2400036c
 800080c:	080121d4 	.word	0x080121d4
 8000810:	08000d41 	.word	0x08000d41
 8000814:	24000370 	.word	0x24000370

08000818 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
 800081c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	224c      	movs	r2, #76	; 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f009 fbb4 	bl	8009f94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2220      	movs	r2, #32
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f009 fbae 	bl	8009f94 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000838:	2004      	movs	r0, #4
 800083a:	f001 fec1 	bl	80025c0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <SystemClock_Config+0xf0>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	4a30      	ldr	r2, [pc, #192]	; (8000908 <SystemClock_Config+0xf0>)
 8000848:	f023 0301 	bic.w	r3, r3, #1
 800084c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800084e:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <SystemClock_Config+0xf0>)
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b2c      	ldr	r3, [pc, #176]	; (800090c <SystemClock_Config+0xf4>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a2a      	ldr	r2, [pc, #168]	; (800090c <SystemClock_Config+0xf4>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <SystemClock_Config+0xf4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000874:	bf00      	nop
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <SystemClock_Config+0xf4>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800087e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000882:	d1f8      	bne.n	8000876 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000888:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088e:	2302      	movs	r3, #2
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 25;
 800089a:	2319      	movs	r3, #25
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 feda 	bl	8002674 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xb2>
		Error_Handler();
 80008c6:	f000 fa5d 	bl	8000d84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008ca:	233f      	movs	r3, #63	; 0x3f
 80008cc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2303      	movs	r3, #3
 80008d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2102      	movs	r1, #2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fb1a 	bl	8002f28 <HAL_RCC_ClockConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xe6>
		Error_Handler();
 80008fa:	f000 fa43 	bl	8000d84 <Error_Handler>
	}
}
 80008fe:	bf00      	nop
 8000900:	3770      	adds	r7, #112	; 0x70
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	58000400 	.word	0x58000400
 800090c:	58024800 	.word	0x58024800

08000910 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_ETH_Init+0x80>)
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <MX_ETH_Init+0x84>)
 8000918:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_ETH_Init+0x88>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ETH_Init+0x88>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ETH_Init+0x88>)
 8000928:	22e1      	movs	r2, #225	; 0xe1
 800092a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_ETH_Init+0x88>)
 800092e:	2200      	movs	r2, #0
 8000930:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ETH_Init+0x88>)
 8000934:	2200      	movs	r2, #0
 8000936:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ETH_Init+0x88>)
 800093a:	2200      	movs	r2, #0
 800093c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_ETH_Init+0x80>)
 8000940:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_ETH_Init+0x88>)
 8000942:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_ETH_Init+0x80>)
 8000946:	2201      	movs	r2, #1
 8000948:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_ETH_Init+0x80>)
 800094c:	4a13      	ldr	r2, [pc, #76]	; (800099c <MX_ETH_Init+0x8c>)
 800094e:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_ETH_Init+0x80>)
 8000952:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <MX_ETH_Init+0x90>)
 8000954:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_ETH_Init+0x80>)
 8000958:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800095c:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_ETH_Init+0x80>)
 8000960:	f000 fff8 	bl	8001954 <HAL_ETH_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ETH_Init+0x5e>
		Error_Handler();
 800096a:	f000 fa0b 	bl	8000d84 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800096e:	2238      	movs	r2, #56	; 0x38
 8000970:	2100      	movs	r1, #0
 8000972:	480c      	ldr	r0, [pc, #48]	; (80009a4 <MX_ETH_Init+0x94>)
 8000974:	f009 fb0e 	bl	8009f94 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_ETH_Init+0x94>)
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_ETH_Init+0x94>)
 8000980:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000984:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_ETH_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2400019c 	.word	0x2400019c
 8000994:	40028000 	.word	0x40028000
 8000998:	24000374 	.word	0x24000374
 800099c:	240000e8 	.word	0x240000e8
 80009a0:	24000088 	.word	0x24000088
 80009a4:	24000164 	.word	0x24000164

080009a8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <MX_SPI1_Init+0xa8>)
 80009b0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009b8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009d8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009e0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_SPI1_Init+0xa4>)
 80009fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a00:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_SPI1_Init+0xa4>)
 8000a3a:	f004 fc6f 	bl	800531c <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI1_Init+0xa0>
		Error_Handler();
 8000a44:	f000 f99e 	bl	8000d84 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2400024c 	.word	0x2400024c
 8000a50:	40013000 	.word	0x40013000

08000a54 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f005 fb1f 	bl	80060e0 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000aa8:	f000 f96c 	bl	8000d84 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f006 fbaf 	bl	8007212 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000aba:	f000 f963 	bl	8000d84 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f006 fbe4 	bl	800728e <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000acc:	f000 f95a 	bl	8000d84 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f006 fb65 	bl	80071a0 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000adc:	f000 f952 	bl	8000d84 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240002d4 	.word	0x240002d4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b6e      	ldr	r3, [pc, #440]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a6c      	ldr	r2, [pc, #432]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b6a      	ldr	r3, [pc, #424]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b20:	4b66      	ldr	r3, [pc, #408]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a65      	ldr	r2, [pc, #404]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b62      	ldr	r3, [pc, #392]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b5f      	ldr	r3, [pc, #380]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a56      	ldr	r2, [pc, #344]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b53      	ldr	r3, [pc, #332]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a4e      	ldr	r2, [pc, #312]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b41      	ldr	r3, [pc, #260]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <MX_GPIO_Init+0x1d0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4839      	ldr	r0, [pc, #228]	; (8000cc0 <MX_GPIO_Init+0x1d4>)
 8000bda:	f001 fc8f 	bl	80024fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000be4:	4837      	ldr	r0, [pc, #220]	; (8000cc4 <MX_GPIO_Init+0x1d8>)
 8000be6:	f001 fc89 	bl	80024fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2140      	movs	r1, #64	; 0x40
 8000bee:	4836      	ldr	r0, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x1dc>)
 8000bf0:	f001 fc84 	bl	80024fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TFT_AO_GPIO_Port, TFT_AO_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfa:	4834      	ldr	r0, [pc, #208]	; (8000ccc <MX_GPIO_Init+0x1e0>)
 8000bfc:	f001 fc7e 	bl	80024fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2102      	movs	r1, #2
 8000c04:	4832      	ldr	r0, [pc, #200]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000c06:	f001 fc79 	bl	80024fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482d      	ldr	r0, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0x1e8>)
 8000c20:	f001 fabc 	bl	800219c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000c24:	2310      	movs	r3, #16
 8000c26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <MX_GPIO_Init+0x1d4>)
 8000c3c:	f001 faae 	bl	800219c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000c40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <MX_GPIO_Init+0x1d8>)
 8000c5a:	f001 fa9f 	bl	800219c <HAL_GPIO_Init>

	/*Configure GPIO pin : TFT_RST_Pin */
	GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <MX_GPIO_Init+0x1dc>)
 8000c76:	f001 fa91 	bl	800219c <HAL_GPIO_Init>

	/*Configure GPIO pin : TFT_AO_Pin */
	GPIO_InitStruct.Pin = TFT_AO_Pin;
 8000c7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(TFT_AO_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	480e      	ldr	r0, [pc, #56]	; (8000ccc <MX_GPIO_Init+0x1e0>)
 8000c94:	f001 fa82 	bl	800219c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <MX_GPIO_Init+0x1e4>)
 8000cb0:	f001 fa74 	bl	800219c <HAL_GPIO_Init>

}
 8000cb4:	bf00      	nop
 8000cb6:	3730      	adds	r7, #48	; 0x30
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	58020000 	.word	0x58020000
 8000cc4:	58020400 	.word	0x58020400
 8000cc8:	58020c00 	.word	0x58020c00
 8000ccc:	58021800 	.word	0x58021800
 8000cd0:	58021000 	.word	0x58021000
 8000cd4:	58020800 	.word	0x58020800

08000cd8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Transmit(&huart3, string, sizeof(string), 1000);
 8000ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce4:	220e      	movs	r2, #14
 8000ce6:	4906      	ldr	r1, [pc, #24]	; (8000d00 <StartDefaultTask+0x28>)
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <StartDefaultTask+0x2c>)
 8000cea:	f005 fa49 	bl	8006180 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000cee:	2101      	movs	r1, #1
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <StartDefaultTask+0x30>)
 8000cf2:	f001 fc1c 	bl	800252e <HAL_GPIO_TogglePin>

		osDelay(1000);
 8000cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfa:	f006 fc75 	bl	80075e8 <osDelay>
		HAL_UART_Transmit(&huart3, string, sizeof(string), 1000);
 8000cfe:	e7ef      	b.n	8000ce0 <StartDefaultTask+0x8>
 8000d00:	24000008 	.word	0x24000008
 8000d04:	240002d4 	.word	0x240002d4
 8000d08:	58020400 	.word	0x58020400

08000d0c <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	ST7735_DrawImage(0, 0, ST7735_WIDTH, ST7735_HEIGHT, (uint16_t*)test_img_128x128);
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <StartTask02+0x2c>)
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2380      	movs	r3, #128	; 0x80
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fc21 	bl	8001566 <ST7735_DrawImage>

	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d24:	2102      	movs	r1, #2
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <StartTask02+0x30>)
 8000d28:	f001 fc01 	bl	800252e <HAL_GPIO_TogglePin>

		osDelay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f006 fc5a 	bl	80075e8 <osDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d34:	e7f6      	b.n	8000d24 <StartTask02+0x18>
 8000d36:	bf00      	nop
 8000d38:	0800a18c 	.word	0x0800a18c
 8000d3c:	58021000 	.word	0x58021000

08000d40 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <StartTask03+0x1c>)
 8000d4e:	f001 fbee 	bl	800252e <HAL_GPIO_TogglePin>
		osDelay(500);
 8000d52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d56:	f006 fc47 	bl	80075e8 <osDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000d5a:	e7f5      	b.n	8000d48 <StartTask03+0x8>
 8000d5c:	58020400 	.word	0x58020400

08000d60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d101      	bne.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000d72:	f000 fcab 	bl	80016cc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40014800 	.word	0x40014800

08000d84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x38>)
 8000d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_MspInit+0x38>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_MspInit+0x38>)
 8000da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	210f      	movs	r1, #15
 8000db8:	f06f 0001 	mvn.w	r0, #1
 8000dbc:	f000 fda2 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400

08000dcc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a59      	ldr	r2, [pc, #356]	; (8000f50 <HAL_ETH_MspInit+0x184>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	f040 80ab 	bne.w	8000f46 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000df0:	4b58      	ldr	r3, [pc, #352]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df6:	4a57      	ldr	r2, [pc, #348]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e00:	4b54      	ldr	r3, [pc, #336]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e2c:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e32:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e3c:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b42      	ldr	r3, [pc, #264]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a40      	ldr	r2, [pc, #256]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a39      	ldr	r2, [pc, #228]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a2a      	ldr	r2, [pc, #168]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <HAL_ETH_MspInit+0x188>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	2332      	movs	r3, #50	; 0x32
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed2:	230b      	movs	r3, #11
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <HAL_ETH_MspInit+0x18c>)
 8000ede:	f001 f95d 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ee2:	2386      	movs	r3, #134	; 0x86
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef2:	230b      	movs	r3, #11
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HAL_ETH_MspInit+0x190>)
 8000efe:	f001 f94d 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4810      	ldr	r0, [pc, #64]	; (8000f60 <HAL_ETH_MspInit+0x194>)
 8000f20:	f001 f93c 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_ETH_MspInit+0x198>)
 8000f42:	f001 f92b 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3738      	adds	r7, #56	; 0x38
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40028000 	.word	0x40028000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020800 	.word	0x58020800
 8000f5c:	58020000 	.word	0x58020000
 8000f60:	58020400 	.word	0x58020400
 8000f64:	58021800 	.word	0x58021800

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b0bc      	sub	sp, #240	; 0xf0
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	22c0      	movs	r2, #192	; 0xc0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f009 f803 	bl	8009f94 <memset>
  if(hspi->Instance==SPI1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a38      	ldr	r2, [pc, #224]	; (8001074 <HAL_SPI_MspInit+0x10c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d168      	bne.n	800106a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 fb89 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000fb8:	f7ff fee4 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fc2:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_SPI_MspInit+0x110>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_SPI_MspInit+0x110>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001016:	2360      	movs	r3, #96	; 0x60
 8001018:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102e:	2305      	movs	r3, #5
 8001030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001038:	4619      	mov	r1, r3
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <HAL_SPI_MspInit+0x114>)
 800103c:	f001 f8ae 	bl	800219c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001058:	2305      	movs	r3, #5
 800105a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001062:	4619      	mov	r1, r3
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <HAL_SPI_MspInit+0x118>)
 8001066:	f001 f899 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	37f0      	adds	r7, #240	; 0xf0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40013000 	.word	0x40013000
 8001078:	58024400 	.word	0x58024400
 800107c:	58020000 	.word	0x58020000
 8001080:	58020c00 	.word	0x58020c00

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ba      	sub	sp, #232	; 0xe8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109c:	f107 0310 	add.w	r3, r7, #16
 80010a0:	22c0      	movs	r2, #192	; 0xc0
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f008 ff75 	bl	8009f94 <memset>
  if(huart->Instance==USART3)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <HAL_UART_MspInit+0xc8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d146      	bne.n	8001142 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b4:	f04f 0202 	mov.w	r2, #2
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fafa 	bl	80036c4 <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010d6:	f7ff fe55 	bl	8000d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0xcc>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_UART_MspInit+0xcc>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_UART_MspInit+0xcc>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001130:	2307      	movs	r3, #7
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_UART_MspInit+0xd0>)
 800113e:	f001 f82d 	bl	800219c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	; 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004800 	.word	0x40004800
 8001150:	58024400 	.word	0x58024400
 8001154:	58020c00 	.word	0x58020c00

08001158 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	d842      	bhi.n	80011ec <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 8001166:	2200      	movs	r2, #0
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	2076      	movs	r0, #118	; 0x76
 800116c:	f000 fbca 	bl	8001904 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001170:	2076      	movs	r0, #118	; 0x76
 8001172:	f000 fbe1 	bl	8001938 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <HAL_InitTick+0xac>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_InitTick+0xb0>)
 800117e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001182:	4a21      	ldr	r2, [pc, #132]	; (8001208 <HAL_InitTick+0xb0>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <HAL_InitTick+0xb0>)
 800118e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 fa4b 	bl	8003640 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011aa:	f002 fa33 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 80011ae:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_InitTick+0xb4>)
 80011b4:	fba2 2303 	umull	r2, r3, r2, r3
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	3b01      	subs	r3, #1
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_InitTick+0xb8>)
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_InitTick+0xbc>)
 80011c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0xb8>)
 80011c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ca:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_InitTick+0xb8>)
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_InitTick+0xb8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_InitTick+0xb8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <HAL_InitTick+0xb8>)
 80011e0:	f004 fca5 	bl	8005b2e <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d107      	bne.n	80011fa <HAL_InitTick+0xa2>
 80011ea:	e001      	b.n	80011f0 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e005      	b.n	80011fc <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_InitTick+0xb8>)
 80011f2:	f004 fcfd 	bl	8005bf0 <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3738      	adds	r7, #56	; 0x38
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000018 	.word	0x24000018
 8001208:	58024400 	.word	0x58024400
 800120c:	431bde83 	.word	0x431bde83
 8001210:	2400037c 	.word	0x2400037c
 8001214:	40014800 	.word	0x40014800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800121c:	e7fe      	b.n	800121c <NMI_Handler+0x4>

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler+0x4>

08001224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <MemManage_Handler+0x4>

0800122a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <BusFault_Handler+0x4>

08001230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <UsageFault_Handler+0x4>

08001236 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM17_IRQHandler+0x10>)
 800124a:	f004 fd49 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2400037c 	.word	0x2400037c

08001258 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <ST7735_Select+0x14>)
 8001262:	f001 f94b 	bl	80024fc <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	58020000 	.word	0x58020000

08001270 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2110      	movs	r1, #16
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <ST7735_Unselect+0x14>)
 800127a:	f001 f93f 	bl	80024fc <HAL_GPIO_WritePin>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	58020000 	.word	0x58020000

08001288 <ST7735_Reset>:

static void ST7735_Reset() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <ST7735_Reset+0x24>)
 8001292:	f001 f933 	bl	80024fc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001296:	2005      	movs	r0, #5
 8001298:	f000 fa38 	bl	800170c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <ST7735_Reset+0x24>)
 80012a2:	f001 f92b 	bl	80024fc <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	58020c00 	.word	0x58020c00

080012b0 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <ST7735_WriteCommand+0x2c>)
 80012c2:	f001 f91b 	bl	80024fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012c6:	1df9      	adds	r1, r7, #7
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	2201      	movs	r2, #1
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <ST7735_WriteCommand+0x30>)
 80012d0:	f004 f948 	bl	8005564 <HAL_SPI_Transmit>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58021800 	.word	0x58021800
 80012e0:	2400024c 	.word	0x2400024c

080012e4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80012ee:	2201      	movs	r2, #1
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <ST7735_WriteData+0x30>)
 80012f6:	f001 f901 	bl	80024fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <ST7735_WriteData+0x34>)
 8001306:	f004 f92d 	bl	8005564 <HAL_SPI_Transmit>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	58021800 	.word	0x58021800
 8001318:	2400024c 	.word	0x2400024c

0800131c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800132e:	e034      	b.n	800139a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffb7 	bl	80012b0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001354:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001356:	7abb      	ldrb	r3, [r7, #10]
 8001358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800135c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800135e:	7abb      	ldrb	r3, [r7, #10]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001364:	7abb      	ldrb	r3, [r7, #10]
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffbb 	bl	80012e4 <ST7735_WriteData>
            addr += numArgs;
 800136e:	7abb      	ldrb	r3, [r7, #10]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001376:	89bb      	ldrh	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00e      	beq.n	800139a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	2bff      	cmp	r3, #255	; 0xff
 800138a:	d102      	bne.n	8001392 <ST7735_ExecuteCommandList+0x76>
 800138c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001390:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8001392:	89bb      	ldrh	r3, [r7, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f9b9 	bl	800170c <HAL_Delay>
    while(numCommands--) {
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	73fa      	strb	r2, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1c5      	bne.n	8001330 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80013ae:	b590      	push	{r4, r7, lr}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4604      	mov	r4, r0
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	4623      	mov	r3, r4
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4603      	mov	r3, r0
 80013c2:	71bb      	strb	r3, [r7, #6]
 80013c4:	460b      	mov	r3, r1
 80013c6:	717b      	strb	r3, [r7, #5]
 80013c8:	4613      	mov	r3, r2
 80013ca:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80013cc:	202a      	movs	r0, #42	; 0x2a
 80013ce:	f7ff ff6f 	bl	80012b0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80013d2:	2300      	movs	r3, #0
 80013d4:	733b      	strb	r3, [r7, #12]
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	3302      	adds	r3, #2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	737b      	strb	r3, [r7, #13]
 80013de:	2300      	movs	r3, #0
 80013e0:	73bb      	strb	r3, [r7, #14]
 80013e2:	797b      	ldrb	r3, [r7, #5]
 80013e4:	3302      	adds	r3, #2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff77 	bl	80012e4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80013f6:	202b      	movs	r0, #43	; 0x2b
 80013f8:	f7ff ff5a 	bl	80012b0 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	3303      	adds	r3, #3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	3303      	adds	r3, #3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2104      	movs	r1, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff66 	bl	80012e4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001418:	202c      	movs	r0, #44	; 0x2c
 800141a:	f7ff ff49 	bl	80012b0 <ST7735_WriteCommand>
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
	...

08001428 <ST7735_Init>:

void ST7735_Init() {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
    ST7735_Select();
 800142c:	f7ff ff14 	bl	8001258 <ST7735_Select>
    ST7735_Reset();
 8001430:	f7ff ff2a 	bl	8001288 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <ST7735_Init+0x28>)
 8001436:	f7ff ff71 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <ST7735_Init+0x2c>)
 800143c:	f7ff ff6e 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <ST7735_Init+0x30>)
 8001442:	f7ff ff6b 	bl	800131c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001446:	f7ff ff13 	bl	8001270 <ST7735_Unselect>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	080121f8 	.word	0x080121f8
 8001454:	08012234 	.word	0x08012234
 8001458:	08012244 	.word	0x08012244

0800145c <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	4603      	mov	r3, r0
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	2b7f      	cmp	r3, #127	; 0x7f
 800147e:	d858      	bhi.n	8001532 <ST7735_FillRectangle+0xd6>
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d855      	bhi.n	8001532 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4413      	add	r3, r2
 800148c:	2b80      	cmp	r3, #128	; 0x80
 800148e:	dd03      	ble.n	8001498 <ST7735_FillRectangle+0x3c>
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001496:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001498:	88ba      	ldrh	r2, [r7, #4]
 800149a:	883b      	ldrh	r3, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	2b80      	cmp	r3, #128	; 0x80
 80014a0:	dd03      	ble.n	80014aa <ST7735_FillRectangle+0x4e>
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014a8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80014aa:	f7ff fed5 	bl	8001258 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	b2d8      	uxtb	r0, r3
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	b2d9      	uxtb	r1, r3
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b2dc      	uxtb	r4, r3
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	883b      	ldrh	r3, [r7, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4622      	mov	r2, r4
 80014d8:	f7ff ff69 	bl	80013ae <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014dc:	8c3b      	ldrh	r3, [r7, #32]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
 80014e6:	8c3b      	ldrh	r3, [r7, #32]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <ST7735_FillRectangle+0xe0>)
 80014f4:	f001 f802 	bl	80024fc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80014f8:	883b      	ldrh	r3, [r7, #0]
 80014fa:	80bb      	strh	r3, [r7, #4]
 80014fc:	e013      	b.n	8001526 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	80fb      	strh	r3, [r7, #6]
 8001502:	e00a      	b.n	800151a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	2202      	movs	r2, #2
 800150e:	480c      	ldr	r0, [pc, #48]	; (8001540 <ST7735_FillRectangle+0xe4>)
 8001510:	f004 f828 	bl	8005564 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	3b01      	subs	r3, #1
 8001518:	80fb      	strh	r3, [r7, #6]
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f1      	bne.n	8001504 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	88bb      	ldrh	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e8      	bne.n	80014fe <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 800152c:	f7ff fea0 	bl	8001270 <ST7735_Unselect>
 8001530:	e000      	b.n	8001534 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001532:	bf00      	nop
}
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	58021800 	.word	0x58021800
 8001540:	2400024c 	.word	0x2400024c

08001544 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	2100      	movs	r1, #0
 8001558:	2000      	movs	r0, #0
 800155a:	f7ff ff7f 	bl	800145c <ST7735_FillRectangle>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <ST7735_DrawImage>:

void ST7735_FillScreenFast(uint16_t color) {
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001566:	b590      	push	{r4, r7, lr}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	4604      	mov	r4, r0
 800156e:	4608      	mov	r0, r1
 8001570:	4611      	mov	r1, r2
 8001572:	461a      	mov	r2, r3
 8001574:	4623      	mov	r3, r4
 8001576:	80fb      	strh	r3, [r7, #6]
 8001578:	4603      	mov	r3, r0
 800157a:	80bb      	strh	r3, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	2b7f      	cmp	r3, #127	; 0x7f
 8001588:	d831      	bhi.n	80015ee <ST7735_DrawImage+0x88>
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	2b7f      	cmp	r3, #127	; 0x7f
 800158e:	d82e      	bhi.n	80015ee <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	4413      	add	r3, r2
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	dc2b      	bgt.n	80015f2 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 800159a:	88ba      	ldrh	r2, [r7, #4]
 800159c:	883b      	ldrh	r3, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	2b80      	cmp	r3, #128	; 0x80
 80015a2:	dc28      	bgt.n	80015f6 <ST7735_DrawImage+0x90>

    ST7735_Select();
 80015a4:	f7ff fe58 	bl	8001258 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	b2d8      	uxtb	r0, r3
 80015ac:	88bb      	ldrh	r3, [r7, #4]
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	887b      	ldrh	r3, [r7, #2]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3b01      	subs	r3, #1
 80015be:	b2dc      	uxtb	r4, r3
 80015c0:	88bb      	ldrh	r3, [r7, #4]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	883b      	ldrh	r3, [r7, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3b01      	subs	r3, #1
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4622      	mov	r2, r4
 80015d2:	f7ff feec 	bl	80013ae <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	883a      	ldrh	r2, [r7, #0]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4619      	mov	r1, r3
 80015e2:	69b8      	ldr	r0, [r7, #24]
 80015e4:	f7ff fe7e 	bl	80012e4 <ST7735_WriteData>
    ST7735_Unselect();
 80015e8:	f7ff fe42 	bl	8001270 <ST7735_Unselect>
 80015ec:	e004      	b.n	80015f8 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80015ee:	bf00      	nop
 80015f0:	e002      	b.n	80015f8 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80015f2:	bf00      	nop
 80015f4:	e000      	b.n	80015f8 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 80015f6:	bf00      	nop
}
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
	...

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001638 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001604:	f7fe ffee 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	; (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	; (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f008 fc7d 	bl	8009f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7ff f86d 	bl	8000710 <main>
  bx  lr
 8001636:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001638:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800163c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001640:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001644:	08012308 	.word	0x08012308
  ldr r2, =_sbss
 8001648:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 800164c:	24004de4 	.word	0x24004de4

08001650 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC3_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165a:	2003      	movs	r0, #3
 800165c:	f000 f947 	bl	80018ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001660:	f001 fe18 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4913      	ldr	r1, [pc, #76]	; (80016c0 <HAL_Init+0x6c>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_Init+0x6c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_Init+0x70>)
 8001696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_Init+0x74>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff fd5a 	bl	8001158 <HAL_InitTick>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e002      	b.n	80016b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ae:	f7ff fb6f 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58024400 	.word	0x58024400
 80016c0:	0800a17c 	.word	0x0800a17c
 80016c4:	24000004 	.word	0x24000004
 80016c8:	24000000 	.word	0x24000000

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	2400001c 	.word	0x2400001c
 80016f0:	240003c8 	.word	0x240003c8

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	240003c8 	.word	0x240003c8

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2400001c 	.word	0x2400001c

08001754 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetREVID+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0c1b      	lsrs	r3, r3, #16
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	5c001000 	.word	0x5c001000

0800176c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000400 	.word	0x58000400

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff4c 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001912:	f7ff ff63 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001916:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f7ff ffb3 	bl	8001888 <NVIC_EncodePriority>
 8001922:	4602      	mov	r2, r0
 8001924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff82 	bl	8001834 <__NVIC_SetPriority>
}
 8001930:	bf00      	nop
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff56 	bl	80017f8 <__NVIC_EnableIRQ>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0cf      	b.n	8001b06 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800196c:	2b00      	cmp	r3, #0
 800196e:	d106      	bne.n	800197e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2223      	movs	r2, #35	; 0x23
 8001974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fa27 	bl	8000dcc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b64      	ldr	r3, [pc, #400]	; (8001b10 <HAL_ETH_Init+0x1bc>)
 8001980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001984:	4a62      	ldr	r2, [pc, #392]	; (8001b10 <HAL_ETH_Init+0x1bc>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <HAL_ETH_Init+0x1bc>)
 8001990:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7a1b      	ldrb	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fee1 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
 80019aa:	e003      	b.n	80019b4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80019ac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80019b0:	f7ff fedc 	bl	800176c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80019b4:	4b57      	ldr	r3, [pc, #348]	; (8001b14 <HAL_ETH_Init+0x1c0>)
 80019b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d0:	f7ff fe90 	bl	80016f4 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019d6:	e011      	b.n	80019fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019d8:	f7ff fe8c 	bl	80016f4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019e6:	d909      	bls.n	80019fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2204      	movs	r2, #4
 80019ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	22e0      	movs	r2, #224	; 0xe0
 80019f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e084      	b.n	8001b06 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e4      	bne.n	80019d8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f886 	bl	8001b20 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001a14:	f001 fdb8 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	; (8001b18 <HAL_ETH_Init+0x1c4>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0c9a      	lsrs	r2, r3, #18
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3a01      	subs	r2, #1
 8001a28:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fa71 	bl	8001f14 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a3e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a4e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	22e0      	movs	r2, #224	; 0xe0
 8001a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e049      	b.n	8001b06 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001a7e:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_ETH_Init+0x1c8>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6952      	ldr	r2, [r2, #20]
 8001a86:	0051      	lsls	r1, r2, #1
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a92:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fad9 	bl	800204e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fb1f 	bl	80020e0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	3305      	adds	r3, #5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	021a      	lsls	r2, r3, #8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	061a      	lsls	r2, r3, #24
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ae0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001aee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001af0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2210      	movs	r2, #16
 8001b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58000400 	.word	0x58000400
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	ffff8001 	.word	0xffff8001

08001b20 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b3a:	f001 fd25 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 8001b3e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d908      	bls.n	8001b5a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d804      	bhi.n	8001b5a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e027      	b.n	8001baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d908      	bls.n	8001b74 <HAL_ETH_SetMDIOClockRange+0x54>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d204      	bcs.n	8001b74 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e01a      	b.n	8001baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d303      	bcc.n	8001b84 <HAL_ETH_SetMDIOClockRange+0x64>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d911      	bls.n	8001ba8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d908      	bls.n	8001b9e <HAL_ETH_SetMDIOClockRange+0x7e>
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_ETH_SetMDIOClockRange+0xac>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d804      	bhi.n	8001b9e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e005      	b.n	8001baa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	e000      	b.n	8001baa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001ba8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	01312cff 	.word	0x01312cff
 8001bc0:	02160ebf 	.word	0x02160ebf
 8001bc4:	03938700 	.word	0x03938700
 8001bc8:	05f5e0ff 	.word	0x05f5e0ff
 8001bcc:	08f0d17f 	.word	0x08f0d17f

08001bd0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001be2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001bea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	7b1b      	ldrb	r3, [r3, #12]
 8001bf0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	7b5b      	ldrb	r3, [r3, #13]
 8001bf8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001bfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	7b9b      	ldrb	r3, [r3, #14]
 8001c00:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	7bdb      	ldrb	r3, [r3, #15]
 8001c08:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c0a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	7c12      	ldrb	r2, [r2, #16]
 8001c10:	2a00      	cmp	r2, #0
 8001c12:	d102      	bne.n	8001c1a <ETH_SetMACConfig+0x4a>
 8001c14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c18:	e000      	b.n	8001c1c <ETH_SetMACConfig+0x4c>
 8001c1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c1c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	7c52      	ldrb	r2, [r2, #17]
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d102      	bne.n	8001c2c <ETH_SetMACConfig+0x5c>
 8001c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2a:	e000      	b.n	8001c2e <ETH_SetMACConfig+0x5e>
 8001c2c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	7c9b      	ldrb	r3, [r3, #18]
 8001c34:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c36:	431a      	orrs	r2, r3
               macconf->Speed |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c3c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001c42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	7f1b      	ldrb	r3, [r3, #28]
 8001c48:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001c4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7f5b      	ldrb	r3, [r3, #29]
 8001c50:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	7f92      	ldrb	r2, [r2, #30]
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d102      	bne.n	8001c62 <ETH_SetMACConfig+0x92>
 8001c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c60:	e000      	b.n	8001c64 <ETH_SetMACConfig+0x94>
 8001c62:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7fdb      	ldrb	r3, [r3, #31]
 8001c6a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d102      	bne.n	8001c7e <ETH_SetMACConfig+0xae>
 8001c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7c:	e000      	b.n	8001c80 <ETH_SetMACConfig+0xb0>
 8001c7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c80:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c8e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001c90:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <ETH_SetMACConfig+0x22c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cba:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001cce:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001cd0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	d102      	bne.n	8001ce2 <ETH_SetMACConfig+0x112>
 8001cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ce0:	e000      	b.n	8001ce4 <ETH_SetMACConfig+0x114>
 8001ce2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ce4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <ETH_SetMACConfig+0x230>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d08:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <ETH_SetMACConfig+0x234>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d2c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d101      	bne.n	8001d42 <ETH_SetMACConfig+0x172>
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	e000      	b.n	8001d44 <ETH_SetMACConfig+0x174>
 8001d42:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d44:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d56:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001d6c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d74:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f023 0103 	bic.w	r1, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001d9a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d101      	bne.n	8001dbe <ETH_SetMACConfig+0x1ee>
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	e000      	b.n	8001dc0 <ETH_SetMACConfig+0x1f0>
 8001dbe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001dc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001dc8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001dd2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001de0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	00048083 	.word	0x00048083
 8001e00:	c0f88000 	.word	0xc0f88000
 8001e04:	fffffef0 	.word	0xfffffef0

08001e08 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <ETH_SetDMAConfig+0xf8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	6811      	ldr	r1, [r2, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e2e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	791b      	ldrb	r3, [r3, #4]
 8001e34:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e3a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	7b1b      	ldrb	r3, [r3, #12]
 8001e40:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <ETH_SetDMAConfig+0xfc>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e60:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7b5b      	ldrb	r3, [r3, #13]
 8001e66:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <ETH_SetDMAConfig+0x100>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	430b      	orrs	r3, r1
 8001e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	7d1b      	ldrb	r3, [r3, #20]
 8001e98:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001e9a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	7f5b      	ldrb	r3, [r3, #29]
 8001ea0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <ETH_SetDMAConfig+0x104>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ec2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
 8001eca:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <ETH_SetDMAConfig+0x108>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ef0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	ffff87fd 	.word	0xffff87fd
 8001f04:	ffff2ffe 	.word	0xffff2ffe
 8001f08:	fffec000 	.word	0xfffec000
 8001f0c:	ffc0efef 	.word	0xffc0efef
 8001f10:	7fc0ffff 	.word	0x7fc0ffff

08001f14 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0a4      	sub	sp, #144	; 0x90
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f22:	2300      	movs	r3, #0
 8001f24:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f54:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001f6c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001f96:	2300      	movs	r3, #0
 8001f98:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001fac:	2320      	movs	r3, #32
 8001fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001fbe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fde6 	bl	8001bd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002004:	2301      	movs	r3, #1
 8002006:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002008:	2301      	movs	r3, #1
 800200a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002010:	2300      	movs	r3, #0
 8002012:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800201e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002022:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002028:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800202c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002034:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4619      	mov	r1, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fee1 	bl	8001e08 <ETH_SetDMAConfig>
}
 8002046:	bf00      	nop
 8002048:	3790      	adds	r7, #144	; 0x90
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e01d      	b.n	8002098 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	3206      	adds	r2, #6
 800208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3301      	adds	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d9de      	bls.n	800205c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	461a      	mov	r2, r3
 80020ae:	2303      	movs	r3, #3
 80020b0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e023      	b.n	8002136 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	3212      	adds	r2, #18
 800212c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d9d8      	bls.n	80020ee <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	461a      	mov	r2, r3
 8002164:	2303      	movs	r3, #3
 8002166:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021aa:	4b89      	ldr	r3, [pc, #548]	; (80023d0 <HAL_GPIO_Init+0x234>)
 80021ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ae:	e194      	b.n	80024da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8186 	beq.w	80024d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d005      	beq.n	80021e0 <HAL_GPIO_Init+0x44>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d130      	bne.n	8002242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002216:	2201      	movs	r2, #1
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 0201 	and.w	r2, r3, #1
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d017      	beq.n	800227e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d123      	bne.n	80022d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	08da      	lsrs	r2, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3208      	adds	r2, #8
 8002292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	220f      	movs	r2, #15
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	08da      	lsrs	r2, r3, #3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3208      	adds	r2, #8
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80e0 	beq.w	80024d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HAL_GPIO_Init+0x238>)
 8002316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800231a:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <HAL_GPIO_Init+0x238>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002324:	4b2b      	ldr	r3, [pc, #172]	; (80023d4 <HAL_GPIO_Init+0x238>)
 8002326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_GPIO_Init+0x23c>)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a20      	ldr	r2, [pc, #128]	; (80023dc <HAL_GPIO_Init+0x240>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d052      	beq.n	8002404 <HAL_GPIO_Init+0x268>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_GPIO_Init+0x244>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d031      	beq.n	80023ca <HAL_GPIO_Init+0x22e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_GPIO_Init+0x248>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x22a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_GPIO_Init+0x24c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x226>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_GPIO_Init+0x250>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x222>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_GPIO_Init+0x254>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_GPIO_Init+0x258>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x21a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a19      	ldr	r2, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x25c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x216>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_GPIO_Init+0x260>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x212>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_GPIO_Init+0x264>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20e>
 80023a6:	2309      	movs	r3, #9
 80023a8:	e02d      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023aa:	230a      	movs	r3, #10
 80023ac:	e02b      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ae:	2308      	movs	r3, #8
 80023b0:	e029      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023b2:	2307      	movs	r3, #7
 80023b4:	e027      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023b6:	2306      	movs	r3, #6
 80023b8:	e025      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e023      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023be:	2304      	movs	r3, #4
 80023c0:	e021      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023c2:	2303      	movs	r3, #3
 80023c4:	e01f      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e01d      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01b      	b.n	8002406 <HAL_GPIO_Init+0x26a>
 80023ce:	bf00      	nop
 80023d0:	58000080 	.word	0x58000080
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58000400 	.word	0x58000400
 80023dc:	58020000 	.word	0x58020000
 80023e0:	58020400 	.word	0x58020400
 80023e4:	58020800 	.word	0x58020800
 80023e8:	58020c00 	.word	0x58020c00
 80023ec:	58021000 	.word	0x58021000
 80023f0:	58021400 	.word	0x58021400
 80023f4:	58021800 	.word	0x58021800
 80023f8:	58021c00 	.word	0x58021c00
 80023fc:	58022000 	.word	0x58022000
 8002400:	58022400 	.word	0x58022400
 8002404:	2300      	movs	r3, #0
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002416:	4938      	ldr	r1, [pc, #224]	; (80024f8 <HAL_GPIO_Init+0x35c>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae63 	bne.w	80021b0 <HAL_GPIO_Init+0x14>
  }
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3724      	adds	r7, #36	; 0x24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	58000400 	.word	0x58000400

080024fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	807b      	strh	r3, [r7, #2]
 8002508:	4613      	mov	r3, r2
 800250a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800250c:	787b      	ldrb	r3, [r7, #1]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002518:	e003      	b.n	8002522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	041a      	lsls	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002540:	887a      	ldrh	r2, [r7, #2]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	041a      	lsls	r2, r3, #16
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43d9      	mvns	r1, r3
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	400b      	ands	r3, r1
 8002550:	431a      	orrs	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_HSEM_FastTake+0x2c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3320      	adds	r3, #32
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <HAL_HSEM_FastTake+0x30>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d101      	bne.n	8002580 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	58026400 	.word	0x58026400
 8002594:	80000300 	.word	0x80000300

08002598 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80025a2:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_HSEM_Release+0x24>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	58026400 	.word	0x58026400

080025c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	2b06      	cmp	r3, #6
 80025d2:	d00a      	beq.n	80025ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025d4:	4b26      	ldr	r3, [pc, #152]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e040      	b.n	8002668 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e03e      	b.n	8002668 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025ea:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80025f2:	491f      	ldr	r1, [pc, #124]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025fa:	f7ff f87b 	bl	80016f4 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002600:	e009      	b.n	8002616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002602:	f7ff f877 	bl	80016f4 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002610:	d901      	bls.n	8002616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e028      	b.n	8002668 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002616:	4b16      	ldr	r3, [pc, #88]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800261e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002622:	d1ee      	bne.n	8002602 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b1e      	cmp	r3, #30
 8002628:	d008      	beq.n	800263c <HAL_PWREx_ConfigSupply+0x7c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b2e      	cmp	r3, #46	; 0x2e
 800262e:	d005      	beq.n	800263c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b1d      	cmp	r3, #29
 8002634:	d002      	beq.n	800263c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b2d      	cmp	r3, #45	; 0x2d
 800263a:	d114      	bne.n	8002666 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800263c:	f7ff f85a 	bl	80016f4 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002642:	e009      	b.n	8002658 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002644:	f7ff f856 	bl	80016f4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002652:	d901      	bls.n	8002658 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e007      	b.n	8002668 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_PWREx_ConfigSupply+0xb0>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d1ee      	bne.n	8002644 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	58024800 	.word	0x58024800

08002674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f000 bc48 	b.w	8002f18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8088 	beq.w	80027a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b99      	ldr	r3, [pc, #612]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a0:	4b96      	ldr	r3, [pc, #600]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d007      	beq.n	80026bc <HAL_RCC_OscConfig+0x48>
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	2b18      	cmp	r3, #24
 80026b0:	d111      	bne.n	80026d6 <HAL_RCC_OscConfig+0x62>
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	4b8f      	ldr	r3, [pc, #572]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d06d      	beq.n	80027a4 <HAL_RCC_OscConfig+0x130>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d169      	bne.n	80027a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f000 bc21 	b.w	8002f18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x7a>
 80026e0:	4b86      	ldr	r3, [pc, #536]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a85      	ldr	r2, [pc, #532]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e02e      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x9c>
 80026f6:	4b81      	ldr	r3, [pc, #516]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a80      	ldr	r2, [pc, #512]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7d      	ldr	r2, [pc, #500]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0xc0>
 800271a:	4b78      	ldr	r3, [pc, #480]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a77      	ldr	r2, [pc, #476]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 8002734:	4b71      	ldr	r3, [pc, #452]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a70      	ldr	r2, [pc, #448]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b6e      	ldr	r3, [pc, #440]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6d      	ldr	r2, [pc, #436]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ffce 	bl	80016f4 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe ffca 	bl	80016f4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e3d4      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800276e:	4b63      	ldr	r3, [pc, #396]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe ffba 	bl	80016f4 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe ffb6 	bl	80016f4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e3c0      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002796:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x110>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80ca 	beq.w	8002948 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b4:	4b51      	ldr	r3, [pc, #324]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027be:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_RCC_OscConfig+0x166>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b18      	cmp	r3, #24
 80027ce:	d156      	bne.n	800287e <HAL_RCC_OscConfig+0x20a>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d151      	bne.n	800287e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027da:	4b48      	ldr	r3, [pc, #288]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e392      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0219 	bic.w	r2, r3, #25
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	493f      	ldr	r1, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7fe ff76 	bl	80016f4 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280c:	f7fe ff72 	bl	80016f4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e37c      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282a:	f7fe ff93 	bl	8001754 <HAL_GetREVID>
 800282e:	4603      	mov	r3, r0
 8002830:	f241 0203 	movw	r2, #4099	; 0x1003
 8002834:	4293      	cmp	r3, r2
 8002836:	d817      	bhi.n	8002868 <HAL_RCC_OscConfig+0x1f4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d108      	bne.n	8002852 <HAL_RCC_OscConfig+0x1de>
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002848:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 800284a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002850:	e07a      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	031b      	lsls	r3, r3, #12
 8002860:	4926      	ldr	r1, [pc, #152]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002866:	e06f      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	4921      	ldr	r1, [pc, #132]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287c:	e064      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d047      	beq.n	8002916 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0219 	bic.w	r2, r3, #25
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	491a      	ldr	r1, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ff2c 	bl	80016f4 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe ff28 	bl	80016f4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e332      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	f7fe ff49 	bl	8001754 <HAL_GetREVID>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d819      	bhi.n	8002900 <HAL_RCC_OscConfig+0x28c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d108      	bne.n	80028e6 <HAL_RCC_OscConfig+0x272>
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80028de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e2:	6053      	str	r3, [r2, #4]
 80028e4:	e030      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	4901      	ldr	r1, [pc, #4]	; (80028fc <HAL_RCC_OscConfig+0x288>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	604b      	str	r3, [r1, #4]
 80028fa:	e025      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
 80028fc:	58024400 	.word	0x58024400
 8002900:	4b9a      	ldr	r3, [pc, #616]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	4997      	ldr	r1, [pc, #604]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
 8002914:	e018      	b.n	8002948 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b95      	ldr	r3, [pc, #596]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a94      	ldr	r2, [pc, #592]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fee7 	bl	80016f4 <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292a:	f7fe fee3 	bl	80016f4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e2ed      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800293c:	4b8b      	ldr	r3, [pc, #556]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80a9 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b85      	ldr	r3, [pc, #532]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800295e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002960:	4b82      	ldr	r3, [pc, #520]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d007      	beq.n	800297c <HAL_RCC_OscConfig+0x308>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b18      	cmp	r3, #24
 8002970:	d13a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x374>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d135      	bne.n	80029e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800297c:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_OscConfig+0x320>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	2b80      	cmp	r3, #128	; 0x80
 800298e:	d001      	beq.n	8002994 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e2c1      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002994:	f7fe fede 	bl	8001754 <HAL_GetREVID>
 8002998:	4603      	mov	r3, r0
 800299a:	f241 0203 	movw	r2, #4099	; 0x1003
 800299e:	4293      	cmp	r3, r2
 80029a0:	d817      	bhi.n	80029d2 <HAL_RCC_OscConfig+0x35e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d108      	bne.n	80029bc <HAL_RCC_OscConfig+0x348>
 80029aa:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029b2:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ba:	e075      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029bc:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	069b      	lsls	r3, r3, #26
 80029ca:	4968      	ldr	r1, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d0:	e06a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d2:	4b66      	ldr	r3, [pc, #408]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	4962      	ldr	r1, [pc, #392]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e6:	e05f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d042      	beq.n	8002a76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029f0:	4b5e      	ldr	r3, [pc, #376]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5d      	ldr	r2, [pc, #372]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fe7a 	bl	80016f4 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a04:	f7fe fe76 	bl	80016f4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e280      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a16:	4b55      	ldr	r3, [pc, #340]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a22:	f7fe fe97 	bl	8001754 <HAL_GetREVID>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d817      	bhi.n	8002a60 <HAL_RCC_OscConfig+0x3ec>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	2b20      	cmp	r3, #32
 8002a36:	d108      	bne.n	8002a4a <HAL_RCC_OscConfig+0x3d6>
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a40:	4a4a      	ldr	r2, [pc, #296]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a46:	6053      	str	r3, [r2, #4]
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
 8002a4a:	4b48      	ldr	r3, [pc, #288]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	069b      	lsls	r3, r3, #26
 8002a58:	4944      	ldr	r1, [pc, #272]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
 8002a5e:	e023      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
 8002a60:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	493f      	ldr	r1, [pc, #252]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60cb      	str	r3, [r1, #12]
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fe37 	bl	80016f4 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fe33 	bl	80016f4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e23d      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a9c:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0308 	and.w	r3, r3, #8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d036      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d019      	beq.n	8002af0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002abc:	4b2b      	ldr	r3, [pc, #172]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	4a2a      	ldr	r2, [pc, #168]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe fe14 	bl	80016f4 <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7fe fe10 	bl	80016f4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e21a      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae2:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x45c>
 8002aee:	e018      	b.n	8002b22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fdfa 	bl	80016f4 <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7fe fdf6 	bl	80016f4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e200      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b16:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d039      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a0c      	ldr	r2, [pc, #48]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fdd7 	bl	80016f4 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4a:	f7fe fdd3 	bl	80016f4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1dd      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4d6>
 8002b68:	e01b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x52e>
 8002b6a:	bf00      	nop
 8002b6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b70:	4b9b      	ldr	r3, [pc, #620]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a9a      	ldr	r2, [pc, #616]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fdba 	bl	80016f4 <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b84:	f7fe fdb6 	bl	80016f4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e1c0      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b96:	4b92      	ldr	r3, [pc, #584]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8081 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb0:	4b8c      	ldr	r3, [pc, #560]	; (8002de4 <HAL_RCC_OscConfig+0x770>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a8b      	ldr	r2, [pc, #556]	; (8002de4 <HAL_RCC_OscConfig+0x770>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fd9a 	bl	80016f4 <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fd96 	bl	80016f4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1a0      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd6:	4b83      	ldr	r3, [pc, #524]	; (8002de4 <HAL_RCC_OscConfig+0x770>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x584>
 8002bea:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	e02d      	b.n	8002c54 <HAL_RCC_OscConfig+0x5e0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5a6>
 8002c00:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a76      	ldr	r2, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	e01c      	b.n	8002c54 <HAL_RCC_OscConfig+0x5e0>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c8>
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2e:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a6b      	ldr	r2, [pc, #428]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0x5e0>
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a67      	ldr	r2, [pc, #412]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a64      	ldr	r2, [pc, #400]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	f023 0304 	bic.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe fd4a 	bl	80016f4 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7fe fd46 	bl	80016f4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e14e      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7a:	4b59      	ldr	r3, [pc, #356]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ee      	beq.n	8002c64 <HAL_RCC_OscConfig+0x5f0>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe fd34 	bl	80016f4 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe fd30 	bl	80016f4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e138      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ee      	bne.n	8002c90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 812d 	beq.w	8002f16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cbc:	4b48      	ldr	r3, [pc, #288]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cc4:	2b18      	cmp	r3, #24
 8002cc6:	f000 80bd 	beq.w	8002e44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	f040 809e 	bne.w	8002e10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b42      	ldr	r3, [pc, #264]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a41      	ldr	r2, [pc, #260]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fd08 	bl	80016f4 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fd04 	bl	80016f4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e10e      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfa:	4b39      	ldr	r3, [pc, #228]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d06:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x774>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	4931      	ldr	r1, [pc, #196]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	3b01      	subs	r3, #1
 8002d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d50:	4923      	ldr	r1, [pc, #140]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d62:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d66:	4b21      	ldr	r3, [pc, #132]	; (8002dec <HAL_RCC_OscConfig+0x778>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6e:	00d2      	lsls	r2, r2, #3
 8002d70:	491b      	ldr	r1, [pc, #108]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4917      	ldr	r1, [pc, #92]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f023 0202 	bic.w	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	4912      	ldr	r1, [pc, #72]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fc8d 	bl	80016f4 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ddc:	e011      	b.n	8002e02 <HAL_RCC_OscConfig+0x78e>
 8002dde:	bf00      	nop
 8002de0:	58024400 	.word	0x58024400
 8002de4:	58024800 	.word	0x58024800
 8002de8:	fffffc0c 	.word	0xfffffc0c
 8002dec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fc80 	bl	80016f4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e08a      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x77c>
 8002e0e:	e082      	b.n	8002f16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a42      	ldr	r2, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fc6a 	bl	80016f4 <HAL_GetTick>
 8002e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe fc66 	bl	80016f4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e070      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x7b0>
 8002e42:	e068      	b.n	8002f16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d031      	beq.n	8002ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f003 0203 	and.w	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d12a      	bne.n	8002ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d122      	bne.n	8002ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d11a      	bne.n	8002ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0a5b      	lsrs	r3, r3, #9
 8002e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d111      	bne.n	8002ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0e1b      	lsrs	r3, r3, #24
 8002eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e02b      	b.n	8002f18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d01f      	beq.n	8002f16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee2:	f7fe fc07 	bl	80016f4 <HAL_GetTick>
 8002ee6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ee8:	bf00      	nop
 8002eea:	f7fe fc03 	bl	80016f4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d0f9      	beq.n	8002eea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_OscConfig+0x8b0>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f02:	00d2      	lsls	r2, r2, #3
 8002f04:	4906      	ldr	r1, [pc, #24]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x8ac>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3730      	adds	r7, #48	; 0x30
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	58024400 	.word	0x58024400
 8002f24:	ffff0007 	.word	0xffff0007

08002f28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e19c      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b87      	ldr	r3, [pc, #540]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 020f 	bic.w	r2, r3, #15
 8002f52:	4985      	ldr	r1, [pc, #532]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e184      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	4b7b      	ldr	r3, [pc, #492]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d908      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f88:	4b78      	ldr	r3, [pc, #480]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	4975      	ldr	r1, [pc, #468]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d908      	bls.n	8002fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d010      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699a      	ldr	r2, [r3, #24]
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d908      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	495e      	ldr	r1, [pc, #376]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800300e:	429a      	cmp	r2, r3
 8003010:	d908      	bls.n	8003024 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4953      	ldr	r1, [pc, #332]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003020:	4313      	orrs	r3, r2
 8003022:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d010      	beq.n	8003052 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	429a      	cmp	r2, r3
 800303e:	d908      	bls.n	8003052 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4947      	ldr	r1, [pc, #284]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800304e:	4313      	orrs	r3, r2
 8003050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d055      	beq.n	800310a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800305e:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800306c:	4313      	orrs	r3, r2
 800306e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003078:	4b3c      	ldr	r3, [pc, #240]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d121      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0f6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d115      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0ea      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0de      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0d6      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f023 0207 	bic.w	r2, r3, #7
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4925      	ldr	r1, [pc, #148]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030da:	f7fe fb0b 	bl	80016f4 <HAL_GetTick>
 80030de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e2:	f7fe fb07 	bl	80016f4 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0be      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	429a      	cmp	r2, r3
 8003108:	d1eb      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d010      	beq.n	8003138 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	429a      	cmp	r2, r3
 8003124:	d208      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f023 020f 	bic.w	r2, r3, #15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	490e      	ldr	r1, [pc, #56]	; (800316c <HAL_RCC_ClockConfig+0x244>)
 8003134:	4313      	orrs	r3, r2
 8003136:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d214      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 020f 	bic.w	r2, r3, #15
 800314e:	4906      	ldr	r1, [pc, #24]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <HAL_RCC_ClockConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e086      	b.n	8003276 <HAL_RCC_ClockConfig+0x34e>
 8003168:	52002000 	.word	0x52002000
 800316c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003188:	429a      	cmp	r2, r3
 800318a:	d208      	bcs.n	800319e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800318c:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800319a:	4313      	orrs	r3, r2
 800319c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b34      	ldr	r3, [pc, #208]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	492e      	ldr	r1, [pc, #184]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d208      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e8:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4922      	ldr	r1, [pc, #136]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d208      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003224:	4313      	orrs	r3, r2
 8003226:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003228:	f000 f834 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b14      	ldr	r3, [pc, #80]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_RCC_ClockConfig+0x358>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_RCC_ClockConfig+0x35c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_RCC_ClockConfig+0x360>)
 800325e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x364>)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x368>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd ff74 	bl	8001158 <HAL_InitTick>
 8003270:	4603      	mov	r3, r0
 8003272:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58024400 	.word	0x58024400
 8003284:	0800a17c 	.word	0x0800a17c
 8003288:	24000004 	.word	0x24000004
 800328c:	24000000 	.word	0x24000000
 8003290:	24000018 	.word	0x24000018

08003294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329a:	4bb3      	ldr	r3, [pc, #716]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032a2:	2b18      	cmp	r3, #24
 80032a4:	f200 8155 	bhi.w	8003552 <HAL_RCC_GetSysClockFreq+0x2be>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	08003315 	.word	0x08003315
 80032b4:	08003553 	.word	0x08003553
 80032b8:	08003553 	.word	0x08003553
 80032bc:	08003553 	.word	0x08003553
 80032c0:	08003553 	.word	0x08003553
 80032c4:	08003553 	.word	0x08003553
 80032c8:	08003553 	.word	0x08003553
 80032cc:	08003553 	.word	0x08003553
 80032d0:	0800333b 	.word	0x0800333b
 80032d4:	08003553 	.word	0x08003553
 80032d8:	08003553 	.word	0x08003553
 80032dc:	08003553 	.word	0x08003553
 80032e0:	08003553 	.word	0x08003553
 80032e4:	08003553 	.word	0x08003553
 80032e8:	08003553 	.word	0x08003553
 80032ec:	08003553 	.word	0x08003553
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003553 	.word	0x08003553
 80032f8:	08003553 	.word	0x08003553
 80032fc:	08003553 	.word	0x08003553
 8003300:	08003553 	.word	0x08003553
 8003304:	08003553 	.word	0x08003553
 8003308:	08003553 	.word	0x08003553
 800330c:	08003553 	.word	0x08003553
 8003310:	08003347 	.word	0x08003347
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003320:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	4a90      	ldr	r2, [pc, #576]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003332:	e111      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003334:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003336:	61bb      	str	r3, [r7, #24]
      break;
 8003338:	e10e      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800333a:	4b8d      	ldr	r3, [pc, #564]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
      break;
 800333e:	e10b      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003340:	4b8c      	ldr	r3, [pc, #560]	; (8003574 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003342:	61bb      	str	r3, [r7, #24]
      break;
 8003344:	e108      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003350:	4b85      	ldr	r3, [pc, #532]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800335c:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80e1 	beq.w	800354c <HAL_RCC_GetSysClockFreq+0x2b8>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f000 8083 	beq.w	8003498 <HAL_RCC_GetSysClockFreq+0x204>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f200 80a1 	bhi.w	80034dc <HAL_RCC_GetSysClockFreq+0x248>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x114>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d056      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033a6:	e099      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02d      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800340e:	e087      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800357c <HAL_RCC_GetSysClockFreq+0x2e8>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a02 	vldr	s12, [r7, #8]
 8003436:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003452:	e065      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a02 	vldr	s12, [r7, #8]
 800347a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003496:	e043      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003584 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80034be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034da:	e021      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003580 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003502:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003578 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800351e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	3301      	adds	r3, #1
 800352c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003538:	edd7 6a07 	vldr	s13, [r7, #28]
 800353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 3a90 	vmov	r3, s15
 8003548:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800354a:	e005      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
      break;
 8003550:	e002      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003554:	61bb      	str	r3, [r7, #24]
      break;
 8003556:	bf00      	nop
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	; 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	03d09000 	.word	0x03d09000
 8003570:	003d0900 	.word	0x003d0900
 8003574:	007a1200 	.word	0x007a1200
 8003578:	46000000 	.word	0x46000000
 800357c:	4c742400 	.word	0x4c742400
 8003580:	4a742400 	.word	0x4a742400
 8003584:	4af42400 	.word	0x4af42400

08003588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800358e:	f7ff fe81 	bl	8003294 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490f      	ldr	r1, [pc, #60]	; (80035dc <HAL_RCC_GetHCLKFreq+0x54>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035ac:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_GetHCLKFreq+0x54>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58024400 	.word	0x58024400
 80035dc:	0800a17c 	.word	0x0800a17c
 80035e0:	24000004 	.word	0x24000004
 80035e4:	24000000 	.word	0x24000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035ec:	f7ff ffcc 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4904      	ldr	r1, [pc, #16]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd80      	pop	{r7, pc}
 800360c:	58024400 	.word	0x58024400
 8003610:	0800a17c 	.word	0x0800a17c

08003614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003618:	f7ff ffb6 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCC_GetPCLK2Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	0800a17c 	.word	0x0800a17c

08003640 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0207 	and.w	r2, r3, #7
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003668:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_RCC_GetClockConfig+0x7c>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCC_GetClockConfig+0x80>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	58024400 	.word	0x58024400
 80036c0:	52002000 	.word	0x52002000

080036c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b0ca      	sub	sp, #296	; 0x128
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036d0:	2300      	movs	r3, #0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80036e8:	2500      	movs	r5, #0
 80036ea:	ea54 0305 	orrs.w	r3, r4, r5
 80036ee:	d049      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003700:	d828      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003706:	d01a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370c:	d822      	bhi.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d007      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003718:	e01c      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371a:	4bb8      	ldr	r3, [pc, #736]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4ab7      	ldr	r2, [pc, #732]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003726:	e01a      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	3308      	adds	r3, #8
 800372e:	2102      	movs	r1, #2
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fc8f 	bl	8005054 <RCCEx_PLL2_Config>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800373c:	e00f      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	3328      	adds	r3, #40	; 0x28
 8003744:	2102      	movs	r1, #2
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fd36 	bl	80051b8 <RCCEx_PLL3_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003752:	e004      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800375c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003766:	4ba5      	ldr	r3, [pc, #660]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003774:	4aa1      	ldr	r2, [pc, #644]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6513      	str	r3, [r2, #80]	; 0x50
 800377a:	e003      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003790:	f04f 0900 	mov.w	r9, #0
 8003794:	ea58 0309 	orrs.w	r3, r8, r9
 8003798:	d047      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d82a      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037c1 	.word	0x080037c1
 80037b0:	080037cf 	.word	0x080037cf
 80037b4:	080037e5 	.word	0x080037e5
 80037b8:	08003803 	.word	0x08003803
 80037bc:	08003803 	.word	0x08003803
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b8e      	ldr	r3, [pc, #568]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a8d      	ldr	r2, [pc, #564]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037cc:	e01a      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	3308      	adds	r3, #8
 80037d4:	2100      	movs	r1, #0
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fc3c 	bl	8005054 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e2:	e00f      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e8:	3328      	adds	r3, #40	; 0x28
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fce3 	bl	80051b8 <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037f8:	e004      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003800:	e000      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800380c:	4b7b      	ldr	r3, [pc, #492]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	f023 0107 	bic.w	r1, r3, #7
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	4a78      	ldr	r2, [pc, #480]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6513      	str	r3, [r2, #80]	; 0x50
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003836:	f04f 0b00 	mov.w	fp, #0
 800383a:	ea5a 030b 	orrs.w	r3, sl, fp
 800383e:	d04c      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	d030      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800384c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003850:	d829      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003852:	2bc0      	cmp	r3, #192	; 0xc0
 8003854:	d02d      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003856:	2bc0      	cmp	r3, #192	; 0xc0
 8003858:	d825      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d018      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800385e:	2b80      	cmp	r3, #128	; 0x80
 8003860:	d821      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d007      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800386a:	e01c      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4a62      	ldr	r2, [pc, #392]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003878:	e01c      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387e:	3308      	adds	r3, #8
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fbe6 	bl	8005054 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800388e:	e011      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	3328      	adds	r3, #40	; 0x28
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fc8d 	bl	80051b8 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038bc:	4b4f      	ldr	r3, [pc, #316]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	4a4c      	ldr	r2, [pc, #304]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6513      	str	r3, [r2, #80]	; 0x50
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80038e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038f0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d053      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003906:	d035      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800390c:	d82e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800390e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003912:	d031      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003914:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003918:	d828      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800391a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800391e:	d01a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003924:	d822      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800392a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800392e:	d007      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003930:	e01c      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003932:	4b32      	ldr	r3, [pc, #200]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393e:	e01c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	3308      	adds	r3, #8
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fb83 	bl	8005054 <RCCEx_PLL2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003954:	e011      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fc2a 	bl	80051b8 <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800396a:	e006      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003972:	e002      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800398e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003992:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6593      	str	r3, [r2, #88]	; 0x58
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800399e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80039ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039b8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80039bc:	460b      	mov	r3, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	d056      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ce:	d038      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80039d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039d4:	d831      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039da:	d034      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80039dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039e0:	d82b      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e6:	d01d      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80039e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ec:	d825      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80039f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039f8:	e01f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039fa:	bf00      	nop
 80039fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a00:	4ba2      	ldr	r3, [pc, #648]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4aa1      	ldr	r2, [pc, #644]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a12:	3308      	adds	r3, #8
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fb1c 	bl	8005054 <RCCEx_PLL2_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a28:	3328      	adds	r3, #40	; 0x28
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fbc3 	bl	80051b8 <RCCEx_PLL3_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a50:	4b8e      	ldr	r3, [pc, #568]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a60:	4a8a      	ldr	r2, [pc, #552]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	d03a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	2b30      	cmp	r3, #48	; 0x30
 8003a98:	d01f      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d819      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d815      	bhi.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d019      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d111      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aae:	4b77      	ldr	r3, [pc, #476]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	4a76      	ldr	r2, [pc, #472]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003aba:	e011      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f001 fac5 	bl	8005054 <RCCEx_PLL2_Config>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ad0:	e006      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ad8:	e002      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af8:	430b      	orrs	r3, r1
 8003afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afc:	e003      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b20:	460b      	mov	r3, r1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	d051      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b30:	d035      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b36:	d82e      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b3c:	d031      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b42:	d828      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d01a      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d822      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b58:	d007      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b5a:	e01c      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5c:	4b4b      	ldr	r3, [pc, #300]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a4a      	ldr	r2, [pc, #296]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fa6e 	bl	8005054 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	3328      	adds	r3, #40	; 0x28
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fb15 	bl	80051b8 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bac:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	4a34      	ldr	r2, [pc, #208]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6513      	str	r3, [r2, #80]	; 0x50
 8003bc0:	e003      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003be0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d056      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf4:	d033      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfa:	d82c      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c00:	d02f      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c06:	d826      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0c:	d02b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c12:	d820      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c18:	d012      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1e:	d81a      	bhi.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d022      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d115      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2e:	3308      	adds	r3, #8
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 fa0e 	bl	8005054 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c3e:	e015      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	3328      	adds	r3, #40	; 0x28
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 fab5 	bl	80051b8 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c54:	e00a      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c5c:	e006      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e004      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10d      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c82:	4a02      	ldr	r2, [pc, #8]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6513      	str	r3, [r2, #80]	; 0x50
 8003c88:	e006      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c8a:	bf00      	nop
 8003c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d055      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cc4:	d033      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cca:	d82c      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d02f      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d826      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cdc:	d02b      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce2:	d820      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d012      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d81a      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d022      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cf8:	d115      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfe:	3308      	adds	r3, #8
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f9a6 	bl	8005054 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d0e:	e015      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d14:	3328      	adds	r3, #40	; 0x28
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fa4d 	bl	80051b8 <RCCEx_PLL3_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d24:	e00a      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e004      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d44:	4ba3      	ldr	r3, [pc, #652]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d54:	4a9f      	ldr	r2, [pc, #636]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6593      	str	r3, [r2, #88]	; 0x58
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d037      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d8e:	d00e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d94:	d816      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4b8c      	ldr	r3, [pc, #560]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a8b      	ldr	r2, [pc, #556]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	3308      	adds	r3, #8
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f94c 	bl	8005054 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd6:	4b7f      	ldr	r3, [pc, #508]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a7b      	ldr	r2, [pc, #492]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6513      	str	r3, [r2, #80]	; 0x50
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003e0a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d039      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d81c      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e61 	.word	0x08003e61
 8003e28:	08003e35 	.word	0x08003e35
 8003e2c:	08003e43 	.word	0x08003e43
 8003e30:	08003e61 	.word	0x08003e61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e34:	4b67      	ldr	r3, [pc, #412]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	4a66      	ldr	r2, [pc, #408]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e40:	e00f      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	3308      	adds	r3, #8
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f902 	bl	8005054 <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e6a:	4b5a      	ldr	r3, [pc, #360]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6e:	f023 0103 	bic.w	r1, r3, #3
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	4a56      	ldr	r2, [pc, #344]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e9e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f000 809f 	beq.w	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eaa:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a4a      	ldr	r2, [pc, #296]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb6:	f7fd fc1d 	bl	80016f4 <HAL_GetTick>
 8003eba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fd fc18 	bl	80016f4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b64      	cmp	r3, #100	; 0x64
 8003ece:	d903      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed8:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ed      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d179      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ef8:	4053      	eors	r3, r2
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f02:	4b34      	ldr	r3, [pc, #208]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a30      	ldr	r2, [pc, #192]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f26:	4a2b      	ldr	r2, [pc, #172]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3a:	d118      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fbda 	bl	80016f4 <HAL_GetTick>
 8003f40:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f44:	e00d      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd fbd5 	bl	80016f4 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f50:	1ad2      	subs	r2, r2, r3
 8003f52:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d903      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003f60:	e005      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0eb      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d129      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f86:	d10e      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f98:	091a      	lsrs	r2, r3, #4
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	4a0d      	ldr	r2, [pc, #52]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6113      	str	r3, [r2, #16]
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb0:	6113      	str	r3, [r2, #16]
 8003fb2:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	4a04      	ldr	r2, [pc, #16]	; (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc8:	e00e      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	58024800 	.word	0x58024800
 8003fdc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 0301 	and.w	r3, r2, #1
 8003ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	f000 8089 	beq.w	800411c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004010:	2b28      	cmp	r3, #40	; 0x28
 8004012:	d86b      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	080040f5 	.word	0x080040f5
 8004020:	080040ed 	.word	0x080040ed
 8004024:	080040ed 	.word	0x080040ed
 8004028:	080040ed 	.word	0x080040ed
 800402c:	080040ed 	.word	0x080040ed
 8004030:	080040ed 	.word	0x080040ed
 8004034:	080040ed 	.word	0x080040ed
 8004038:	080040ed 	.word	0x080040ed
 800403c:	080040c1 	.word	0x080040c1
 8004040:	080040ed 	.word	0x080040ed
 8004044:	080040ed 	.word	0x080040ed
 8004048:	080040ed 	.word	0x080040ed
 800404c:	080040ed 	.word	0x080040ed
 8004050:	080040ed 	.word	0x080040ed
 8004054:	080040ed 	.word	0x080040ed
 8004058:	080040ed 	.word	0x080040ed
 800405c:	080040d7 	.word	0x080040d7
 8004060:	080040ed 	.word	0x080040ed
 8004064:	080040ed 	.word	0x080040ed
 8004068:	080040ed 	.word	0x080040ed
 800406c:	080040ed 	.word	0x080040ed
 8004070:	080040ed 	.word	0x080040ed
 8004074:	080040ed 	.word	0x080040ed
 8004078:	080040ed 	.word	0x080040ed
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040ed 	.word	0x080040ed
 8004084:	080040ed 	.word	0x080040ed
 8004088:	080040ed 	.word	0x080040ed
 800408c:	080040ed 	.word	0x080040ed
 8004090:	080040ed 	.word	0x080040ed
 8004094:	080040ed 	.word	0x080040ed
 8004098:	080040ed 	.word	0x080040ed
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040ed 	.word	0x080040ed
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040ed 	.word	0x080040ed
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040f5 	.word	0x080040f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c4:	3308      	adds	r3, #8
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 ffc3 	bl	8005054 <RCCEx_PLL2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040d4:	e00f      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040da:	3328      	adds	r3, #40	; 0x28
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 f86a 	bl	80051b8 <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80040ea:	e004      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80040f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040fe:	4bbf      	ldr	r3, [pc, #764]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800410c:	4abb      	ldr	r2, [pc, #748]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800410e:	430b      	orrs	r3, r1
 8004110:	6553      	str	r3, [r2, #84]	; 0x54
 8004112:	e003      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f002 0302 	and.w	r3, r2, #2
 8004128:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004132:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d041      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004142:	2b05      	cmp	r3, #5
 8004144:	d824      	bhi.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004199 	.word	0x08004199
 8004150:	08004165 	.word	0x08004165
 8004154:	0800417b 	.word	0x0800417b
 8004158:	08004199 	.word	0x08004199
 800415c:	08004199 	.word	0x08004199
 8004160:	08004199 	.word	0x08004199
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004168:	3308      	adds	r3, #8
 800416a:	2101      	movs	r1, #1
 800416c:	4618      	mov	r0, r3
 800416e:	f000 ff71 	bl	8005054 <RCCEx_PLL2_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004178:	e00f      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417e:	3328      	adds	r3, #40	; 0x28
 8004180:	2101      	movs	r1, #1
 8004182:	4618      	mov	r0, r3
 8004184:	f001 f818 	bl	80051b8 <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800418e:	e004      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041a2:	4b96      	ldr	r3, [pc, #600]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f023 0107 	bic.w	r1, r3, #7
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b0:	4a92      	ldr	r2, [pc, #584]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6553      	str	r3, [r2, #84]	; 0x54
 80041b6:	e003      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c8:	f002 0304 	and.w	r3, r2, #4
 80041cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80041da:	460b      	mov	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	d044      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d825      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80041ec:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004241 	.word	0x08004241
 80041f8:	0800420d 	.word	0x0800420d
 80041fc:	08004223 	.word	0x08004223
 8004200:	08004241 	.word	0x08004241
 8004204:	08004241 	.word	0x08004241
 8004208:	08004241 	.word	0x08004241
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004210:	3308      	adds	r3, #8
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f000 ff1d 	bl	8005054 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004220:	e00f      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	3328      	adds	r3, #40	; 0x28
 8004228:	2101      	movs	r1, #1
 800422a:	4618      	mov	r0, r3
 800422c:	f000 ffc4 	bl	80051b8 <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800424a:	4b6c      	ldr	r3, [pc, #432]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f023 0107 	bic.w	r1, r3, #7
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	4a68      	ldr	r2, [pc, #416]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6593      	str	r3, [r2, #88]	; 0x58
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f002 0320 	and.w	r3, r2, #32
 8004276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004280:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d055      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004296:	d033      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429c:	d82c      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a8:	d826      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042ae:	d02b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80042b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042b4:	d820      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ba:	d012      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80042bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c0:	d81a      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d022      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80042c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ca:	d115      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d0:	3308      	adds	r3, #8
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 febd 	bl	8005054 <RCCEx_PLL2_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042e0:	e015      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e6:	3328      	adds	r3, #40	; 0x28
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 ff64 	bl	80051b8 <RCCEx_PLL3_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80042f6:	e00a      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042fe:	e006      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004300:	bf00      	nop
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004304:	bf00      	nop
 8004306:	e002      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004326:	4a35      	ldr	r2, [pc, #212]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6553      	str	r3, [r2, #84]	; 0x54
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800434c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d058      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004362:	d033      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004364:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004368:	d82c      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d02f      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004374:	d826      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800437a:	d02b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800437c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004380:	d820      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004386:	d012      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800438c:	d81a      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d022      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004396:	d115      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439c:	3308      	adds	r3, #8
 800439e:	2100      	movs	r1, #0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fe57 	bl	8005054 <RCCEx_PLL2_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043ac:	e015      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	3328      	adds	r3, #40	; 0x28
 80043b4:	2102      	movs	r1, #2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fefe 	bl	80051b8 <RCCEx_PLL3_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043c2:	e00a      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043ca:	e006      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043cc:	bf00      	nop
 80043ce:	e004      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d0:	bf00      	nop
 80043d2:	e002      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80043d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10e      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043f2:	4a02      	ldr	r2, [pc, #8]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80043fa:	bf00      	nop
 80043fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800441e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d055      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800442c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004430:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004434:	d033      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004436:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800443a:	d82c      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004440:	d02f      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004446:	d826      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004448:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800444c:	d02b      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800444e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004452:	d820      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004458:	d012      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800445a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800445e:	d81a      	bhi.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d022      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d115      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446e:	3308      	adds	r3, #8
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fdee 	bl	8005054 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800447e:	e015      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004484:	3328      	adds	r3, #40	; 0x28
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fe95 	bl	80051b8 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004494:	e00a      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800449c:	e006      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800449e:	bf00      	nop
 80044a0:	e004      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044a2:	bf00      	nop
 80044a4:	e002      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044b4:	4ba1      	ldr	r3, [pc, #644]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80044bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044c4:	4a9d      	ldr	r2, [pc, #628]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c6:	430b      	orrs	r3, r1
 80044c8:	6593      	str	r3, [r2, #88]	; 0x58
 80044ca:	e003      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 0308 	and.w	r3, r2, #8
 80044e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d01e      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d10c      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004506:	3328      	adds	r3, #40	; 0x28
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fe54 	bl	80051b8 <RCCEx_PLL3_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800451c:	4b87      	ldr	r3, [pc, #540]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800451e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004520:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452c:	4a83      	ldr	r2, [pc, #524]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	430b      	orrs	r3, r1
 8004530:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f002 0310 	and.w	r3, r2, #16
 800453e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004542:	2300      	movs	r3, #0
 8004544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004548:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d01e      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d10c      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004564:	3328      	adds	r3, #40	; 0x28
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fe25 	bl	80051b8 <RCCEx_PLL3_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800457a:	4b70      	ldr	r3, [pc, #448]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458a:	4a6c      	ldr	r2, [pc, #432]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458c:	430b      	orrs	r3, r1
 800458e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800459c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80045aa:	460b      	mov	r3, r1
 80045ac:	4313      	orrs	r3, r2
 80045ae:	d03e      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045bc:	d022      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80045be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c2:	d81b      	bhi.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d00b      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80045ce:	e015      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045d4:	3308      	adds	r3, #8
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fd3b 	bl	8005054 <RCCEx_PLL2_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045e4:	e00f      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ea:	3328      	adds	r3, #40	; 0x28
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fde2 	bl	80051b8 <RCCEx_PLL3_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004602:	e000      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460e:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800461e:	4a47      	ldr	r2, [pc, #284]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004620:	430b      	orrs	r3, r1
 8004622:	6593      	str	r3, [r2, #88]	; 0x58
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800462a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800463a:	67bb      	str	r3, [r7, #120]	; 0x78
 800463c:	2300      	movs	r3, #0
 800463e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004640:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d03b      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004656:	d01f      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465c:	d818      	bhi.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d003      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004668:	d007      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800466a:	e011      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a32      	ldr	r2, [pc, #200]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004678:	e00f      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	3328      	adds	r3, #40	; 0x28
 8004680:	2101      	movs	r1, #1
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd98 	bl	80051b8 <RCCEx_PLL3_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	4a22      	ldr	r2, [pc, #136]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6553      	str	r3, [r2, #84]	; 0x54
 80046b8:	e003      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80046ce:	673b      	str	r3, [r7, #112]	; 0x70
 80046d0:	2300      	movs	r3, #0
 80046d2:	677b      	str	r3, [r7, #116]	; 0x74
 80046d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80046d8:	460b      	mov	r3, r1
 80046da:	4313      	orrs	r3, r2
 80046dc:	d034      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d007      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80046ee:	e011      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a11      	ldr	r2, [pc, #68]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046fc:	e00e      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004702:	3308      	adds	r3, #8
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fca4 	bl	8005054 <RCCEx_PLL2_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800471a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	4a02      	ldr	r2, [pc, #8]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004734:	430b      	orrs	r3, r1
 8004736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004738:	e006      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004744:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004754:	66bb      	str	r3, [r7, #104]	; 0x68
 8004756:	2300      	movs	r3, #0
 8004758:	66fb      	str	r3, [r7, #108]	; 0x6c
 800475a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800475e:	460b      	mov	r3, r1
 8004760:	4313      	orrs	r3, r2
 8004762:	d00c      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004768:	3328      	adds	r3, #40	; 0x28
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fd23 	bl	80051b8 <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800478a:	663b      	str	r3, [r7, #96]	; 0x60
 800478c:	2300      	movs	r3, #0
 800478e:	667b      	str	r3, [r7, #100]	; 0x64
 8004790:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004794:	460b      	mov	r3, r1
 8004796:	4313      	orrs	r3, r2
 8004798:	d038      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800479e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a6:	d018      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ac:	d811      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b2:	d014      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b8:	d80b      	bhi.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d011      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80047be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c2:	d106      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c4:	4bc3      	ldr	r3, [pc, #780]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4ac2      	ldr	r2, [pc, #776]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047d8:	e004      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80047e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ec:	4bb9      	ldr	r3, [pc, #740]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fc:	4ab5      	ldr	r2, [pc, #724]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fe:	430b      	orrs	r3, r1
 8004800:	6553      	str	r3, [r2, #84]	; 0x54
 8004802:	e003      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004808:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004818:	65bb      	str	r3, [r7, #88]	; 0x58
 800481a:	2300      	movs	r3, #0
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800481e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004828:	4baa      	ldr	r3, [pc, #680]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004836:	4aa7      	ldr	r2, [pc, #668]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004838:	430b      	orrs	r3, r1
 800483a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004848:	653b      	str	r3, [r7, #80]	; 0x50
 800484a:	2300      	movs	r3, #0
 800484c:	657b      	str	r3, [r7, #84]	; 0x54
 800484e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004858:	4b9e      	ldr	r3, [pc, #632]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004864:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004868:	4a9a      	ldr	r2, [pc, #616]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486a:	430b      	orrs	r3, r1
 800486c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
 800487c:	2300      	movs	r3, #0
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004880:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800488a:	4b92      	ldr	r3, [pc, #584]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004898:	4a8e      	ldr	r2, [pc, #568]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	430b      	orrs	r3, r1
 800489c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
 80048ac:	2300      	movs	r3, #0
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ba:	4b86      	ldr	r3, [pc, #536]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	4a85      	ldr	r2, [pc, #532]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048c4:	6113      	str	r3, [r2, #16]
 80048c6:	4b83      	ldr	r3, [pc, #524]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c8:	6919      	ldr	r1, [r3, #16]
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80048d2:	4a80      	ldr	r2, [pc, #512]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e6:	2300      	movs	r3, #0
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80048f4:	4b77      	ldr	r3, [pc, #476]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004902:	4a74      	ldr	r2, [pc, #464]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004904:	430b      	orrs	r3, r1
 8004906:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 8004916:	2300      	movs	r3, #0
 8004918:	637b      	str	r3, [r7, #52]	; 0x34
 800491a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004924:	4b6b      	ldr	r3, [pc, #428]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004934:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004936:	430b      	orrs	r3, r1
 8004938:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	2100      	movs	r1, #0
 8004944:	62b9      	str	r1, [r7, #40]	; 0x28
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495a:	3308      	adds	r3, #8
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fb78 	bl	8005054 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	2100      	movs	r1, #0
 8004984:	6239      	str	r1, [r7, #32]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d011      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800499a:	3308      	adds	r3, #8
 800499c:	2101      	movs	r1, #1
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fb58 	bl	8005054 <RCCEx_PLL2_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	2100      	movs	r1, #0
 80049c4:	61b9      	str	r1, [r7, #24]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d011      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049da:	3308      	adds	r3, #8
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fb38 	bl	8005054 <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80049f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	2100      	movs	r1, #0
 8004a04:	6139      	str	r1, [r7, #16]
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d011      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1a:	3328      	adds	r3, #40	; 0x28
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fbca 	bl	80051b8 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	2100      	movs	r1, #0
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a50:	460b      	mov	r3, r1
 8004a52:	4313      	orrs	r3, r2
 8004a54:	d011      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5a:	3328      	adds	r3, #40	; 0x28
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fbaa 	bl	80051b8 <RCCEx_PLL3_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	2100      	movs	r1, #0
 8004a84:	6039      	str	r1, [r7, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a90:	460b      	mov	r3, r1
 8004a92:	4313      	orrs	r3, r2
 8004a94:	d011      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a9a:	3328      	adds	r3, #40	; 0x28
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fb8a 	bl	80051b8 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004aba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad4:	58024400 	.word	0x58024400

08004ad8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004adc:	f7fe fd54 	bl	8003588 <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4904      	ldr	r1, [pc, #16]	; (8004b00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	58024400 	.word	0x58024400
 8004b00:	0800a17c 	.word	0x0800a17c

08004b04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b0c:	4ba1      	ldr	r3, [pc, #644]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b16:	4b9f      	ldr	r3, [pc, #636]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	0b1b      	lsrs	r3, r3, #12
 8004b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b22:	4b9c      	ldr	r3, [pc, #624]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b2e:	4b99      	ldr	r3, [pc, #612]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8111 	beq.w	8004d74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	f000 8083 	beq.w	8004c60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	f200 80a1 	bhi.w	8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d056      	beq.n	8004c1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b6e:	e099      	b.n	8004ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b70:	4b88      	ldr	r3, [pc, #544]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02d      	beq.n	8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b7c:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	4a84      	ldr	r2, [pc, #528]	; (8004d98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	ee07 3a90 	vmov	s15, r3
 8004b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba6:	4b7b      	ldr	r3, [pc, #492]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bae:	ee07 3a90 	vmov	s15, r3
 8004bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bd6:	e087      	b.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004da0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bea:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1a:	e065      	b.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2e:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c5e:	e043      	b.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c72:	4b48      	ldr	r3, [pc, #288]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca2:	e021      	b.n	8004ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ce6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	0a5b      	lsrs	r3, r3, #9
 8004cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0e:	ee17 2a90 	vmov	r2, s15
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d16:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3c:	ee17 2a90 	vmov	r2, s15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	0e1b      	lsrs	r3, r3, #24
 8004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6a:	ee17 2a90 	vmov	r2, s15
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d72:	e008      	b.n	8004d86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
}
 8004d86:	bf00      	nop
 8004d88:	3724      	adds	r7, #36	; 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	58024400 	.word	0x58024400
 8004d98:	03d09000 	.word	0x03d09000
 8004d9c:	46000000 	.word	0x46000000
 8004da0:	4c742400 	.word	0x4c742400
 8004da4:	4a742400 	.word	0x4a742400
 8004da8:	4af42400 	.word	0x4af42400

08004dac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b089      	sub	sp, #36	; 0x24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004db4:	4ba1      	ldr	r3, [pc, #644]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004dbe:	4b9f      	ldr	r3, [pc, #636]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	0d1b      	lsrs	r3, r3, #20
 8004dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dca:	4b9c      	ldr	r3, [pc, #624]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004dd6:	4b99      	ldr	r3, [pc, #612]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	08db      	lsrs	r3, r3, #3
 8004ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8111 	beq.w	800501c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	f000 8083 	beq.w	8004f08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	f200 80a1 	bhi.w	8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d056      	beq.n	8004ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e16:	e099      	b.n	8004f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e18:	4b88      	ldr	r3, [pc, #544]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d02d      	beq.n	8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e24:	4b85      	ldr	r3, [pc, #532]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	4a84      	ldr	r2, [pc, #528]	; (8005040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
 8004e34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	ee07 3a90 	vmov	s15, r3
 8004e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e7e:	e087      	b.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005048 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e92:	4b6a      	ldr	r3, [pc, #424]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ec2:	e065      	b.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed6:	4b59      	ldr	r3, [pc, #356]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f06:	e043      	b.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1a:	4b48      	ldr	r3, [pc, #288]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f4a:	e021      	b.n	8004f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800504c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f90:	4b2a      	ldr	r3, [pc, #168]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	0a5b      	lsrs	r3, r3, #9
 8004f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb6:	ee17 2a90 	vmov	r2, s15
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	0c1b      	lsrs	r3, r3, #16
 8004fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe4:	ee17 2a90 	vmov	r2, s15
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	0e1b      	lsrs	r3, r3, #24
 8004ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005006:	edd7 6a07 	vldr	s13, [r7, #28]
 800500a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005012:	ee17 2a90 	vmov	r2, s15
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800501a:	e008      	b.n	800502e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
}
 800502e:	bf00      	nop
 8005030:	3724      	adds	r7, #36	; 0x24
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	58024400 	.word	0x58024400
 8005040:	03d09000 	.word	0x03d09000
 8005044:	46000000 	.word	0x46000000
 8005048:	4c742400 	.word	0x4c742400
 800504c:	4a742400 	.word	0x4a742400
 8005050:	4af42400 	.word	0x4af42400

08005054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005062:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b03      	cmp	r3, #3
 800506c:	d101      	bne.n	8005072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e099      	b.n	80051a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005072:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a4e      	ldr	r2, [pc, #312]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800507c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800507e:	f7fc fb39 	bl	80016f4 <HAL_GetTick>
 8005082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005084:	e008      	b.n	8005098 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005086:	f7fc fb35 	bl	80016f4 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e086      	b.n	80051a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005098:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050a4:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	493f      	ldr	r1, [pc, #252]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	628b      	str	r3, [r1, #40]	; 0x28
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	3b01      	subs	r3, #1
 80050be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	025b      	lsls	r3, r3, #9
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	061b      	lsls	r3, r3, #24
 80050e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050e8:	4931      	ldr	r1, [pc, #196]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050ee:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	492d      	ldr	r1, [pc, #180]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005100:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	f023 0220 	bic.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	4928      	ldr	r1, [pc, #160]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005112:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005118:	f023 0310 	bic.w	r3, r3, #16
 800511c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005122:	4b24      	ldr	r3, [pc, #144]	; (80051b4 <RCCEx_PLL2_Config+0x160>)
 8005124:	4013      	ands	r3, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	69d2      	ldr	r2, [r2, #28]
 800512a:	00d2      	lsls	r2, r2, #3
 800512c:	4920      	ldr	r1, [pc, #128]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800512e:	4313      	orrs	r3, r2
 8005130:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005132:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	4a1e      	ldr	r2, [pc, #120]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005138:	f043 0310 	orr.w	r3, r3, #16
 800513c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d106      	bne.n	8005152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005144:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	4a19      	ldr	r2, [pc, #100]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800514a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005150:	e00f      	b.n	8005172 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	4a14      	ldr	r2, [pc, #80]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005164:	e005      	b.n	8005172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a11      	ldr	r2, [pc, #68]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800516c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a0e      	ldr	r2, [pc, #56]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 8005178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800517c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517e:	f7fc fab9 	bl	80016f4 <HAL_GetTick>
 8005182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005184:	e008      	b.n	8005198 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005186:	f7fc fab5 	bl	80016f4 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <RCCEx_PLL2_Config+0x15c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
 80051b4:	ffff0007 	.word	0xffff0007

080051b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051c6:	4b53      	ldr	r3, [pc, #332]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d101      	bne.n	80051d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e099      	b.n	800530a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051d6:	4b4f      	ldr	r3, [pc, #316]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a4e      	ldr	r2, [pc, #312]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e2:	f7fc fa87 	bl	80016f4 <HAL_GetTick>
 80051e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051e8:	e008      	b.n	80051fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051ea:	f7fc fa83 	bl	80016f4 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e086      	b.n	800530a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051fc:	4b45      	ldr	r3, [pc, #276]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f0      	bne.n	80051ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	051b      	lsls	r3, r3, #20
 8005216:	493f      	ldr	r1, [pc, #252]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	628b      	str	r3, [r1, #40]	; 0x28
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	3b01      	subs	r3, #1
 8005222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	3b01      	subs	r3, #1
 800522c:	025b      	lsls	r3, r3, #9
 800522e:	b29b      	uxth	r3, r3
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	3b01      	subs	r3, #1
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	3b01      	subs	r3, #1
 8005246:	061b      	lsls	r3, r3, #24
 8005248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800524c:	4931      	ldr	r1, [pc, #196]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 800524e:	4313      	orrs	r3, r2
 8005250:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005252:	4b30      	ldr	r3, [pc, #192]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	492d      	ldr	r1, [pc, #180]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005260:	4313      	orrs	r3, r2
 8005262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4928      	ldr	r1, [pc, #160]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005272:	4313      	orrs	r3, r2
 8005274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005276:	4b27      	ldr	r3, [pc, #156]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 800527c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005286:	4b24      	ldr	r3, [pc, #144]	; (8005318 <RCCEx_PLL3_Config+0x160>)
 8005288:	4013      	ands	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	69d2      	ldr	r2, [r2, #28]
 800528e:	00d2      	lsls	r2, r2, #3
 8005290:	4920      	ldr	r1, [pc, #128]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005292:	4313      	orrs	r3, r2
 8005294:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005296:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052a8:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052b4:	e00f      	b.n	80052d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d106      	bne.n	80052ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	4a14      	ldr	r2, [pc, #80]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80052c8:	e005      	b.n	80052d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	4a11      	ldr	r2, [pc, #68]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a0e      	ldr	r2, [pc, #56]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e2:	f7fc fa07 	bl	80016f4 <HAL_GetTick>
 80052e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052e8:	e008      	b.n	80052fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ea:	f7fc fa03 	bl	80016f4 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e006      	b.n	800530a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	58024400 	.word	0x58024400
 8005318:	ffff0007 	.word	0xffff0007

0800531c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e10f      	b.n	800554e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a87      	ldr	r2, [pc, #540]	; (8005558 <HAL_SPI_Init+0x23c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00f      	beq.n	800535e <HAL_SPI_Init+0x42>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a86      	ldr	r2, [pc, #536]	; (800555c <HAL_SPI_Init+0x240>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00a      	beq.n	800535e <HAL_SPI_Init+0x42>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a84      	ldr	r2, [pc, #528]	; (8005560 <HAL_SPI_Init+0x244>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d005      	beq.n	800535e <HAL_SPI_Init+0x42>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d901      	bls.n	800535e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e0f7      	b.n	800554e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fbca 	bl	8005af8 <SPI_GetPacketSize>
 8005364:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a7b      	ldr	r2, [pc, #492]	; (8005558 <HAL_SPI_Init+0x23c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00c      	beq.n	800538a <HAL_SPI_Init+0x6e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a79      	ldr	r2, [pc, #484]	; (800555c <HAL_SPI_Init+0x240>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <HAL_SPI_Init+0x6e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a78      	ldr	r2, [pc, #480]	; (8005560 <HAL_SPI_Init+0x244>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d002      	beq.n	800538a <HAL_SPI_Init+0x6e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d811      	bhi.n	80053ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800538e:	4a72      	ldr	r2, [pc, #456]	; (8005558 <HAL_SPI_Init+0x23c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a70      	ldr	r2, [pc, #448]	; (800555c <HAL_SPI_Init+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_SPI_Init+0x8c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <HAL_SPI_Init+0x244>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d104      	bne.n	80053b2 <HAL_SPI_Init+0x96>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d901      	bls.n	80053b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0cd      	b.n	800554e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fb fdce 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80053ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f8:	d119      	bne.n	800542e <HAL_SPI_Init+0x112>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005402:	d103      	bne.n	800540c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541c:	d107      	bne.n	800542e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00f      	beq.n	800545a <HAL_SPI_Init+0x13e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b06      	cmp	r3, #6
 8005440:	d90b      	bls.n	800545a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e007      	b.n	800546a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005468:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	431a      	orrs	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	ea42 0103 	orr.w	r1, r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	431a      	orrs	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ca:	ea42 0103 	orr.w	r1, r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d113      	bne.n	800550a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005508:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0201 	bic.w	r2, r2, #1
 8005518:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40013000 	.word	0x40013000
 800555c:	40003800 	.word	0x40003800
 8005560:	40003c00 	.word	0x40003c00

08005564 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3320      	adds	r3, #32
 800557a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <HAL_SPI_Transmit+0x2a>
 800558a:	2302      	movs	r3, #2
 800558c:	e1e1      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005596:	f7fc f8ad 	bl	80016f4 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d007      	beq.n	80055b8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80055a8:	2302      	movs	r3, #2
 80055aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055b4:	7efb      	ldrb	r3, [r7, #27]
 80055b6:	e1cc      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_SPI_Transmit+0x60>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80055d0:	7efb      	ldrb	r3, [r7, #27]
 80055d2:	e1be      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2203      	movs	r2, #3
 80055d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	88fa      	ldrh	r2, [r7, #6]
 80055f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005624:	d108      	bne.n	8005638 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e009      	b.n	800564c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800564a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b96      	ldr	r3, [pc, #600]	; (80058ac <HAL_SPI_Transmit+0x348>)
 8005654:	4013      	ands	r3, r2
 8005656:	88f9      	ldrh	r1, [r7, #6]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	430b      	orrs	r3, r1
 800565e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005678:	d107      	bne.n	800568a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b0f      	cmp	r3, #15
 8005690:	d947      	bls.n	8005722 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005692:	e03f      	b.n	8005714 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d114      	bne.n	80056cc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80056ca:	e023      	b.n	8005714 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056cc:	f7fc f812 	bl	80016f4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d803      	bhi.n	80056e4 <HAL_SPI_Transmit+0x180>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e2:	d102      	bne.n	80056ea <HAL_SPI_Transmit+0x186>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d114      	bne.n	8005714 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f936 	bl	800595c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e11e      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1b9      	bne.n	8005694 <HAL_SPI_Transmit+0x130>
 8005720:	e0f1      	b.n	8005906 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	2b07      	cmp	r3, #7
 8005728:	f240 80e6 	bls.w	80058f8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800572c:	e05d      	b.n	80057ea <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d132      	bne.n	80057a2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d918      	bls.n	800577a <HAL_SPI_Transmit+0x216>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d014      	beq.n	800577a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005760:	1d1a      	adds	r2, r3, #4
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b02      	subs	r3, #2
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005778:	e037      	b.n	80057ea <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057a0:	e023      	b.n	80057ea <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a2:	f7fb ffa7 	bl	80016f4 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d803      	bhi.n	80057ba <HAL_SPI_Transmit+0x256>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d102      	bne.n	80057c0 <HAL_SPI_Transmit+0x25c>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d114      	bne.n	80057ea <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f8cb 	bl	800595c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0b3      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d19b      	bne.n	800572e <HAL_SPI_Transmit+0x1ca>
 80057f6:	e086      	b.n	8005906 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d154      	bne.n	80058b0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b03      	cmp	r3, #3
 8005810:	d918      	bls.n	8005844 <HAL_SPI_Transmit+0x2e0>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d914      	bls.n	8005844 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	1d1a      	adds	r2, r3, #4
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b04      	subs	r3, #4
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005842:	e059      	b.n	80058f8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d917      	bls.n	8005880 <HAL_SPI_Transmit+0x31c>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005866:	1c9a      	adds	r2, r3, #2
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b02      	subs	r3, #2
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800587e:	e03b      	b.n	80058f8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3320      	adds	r3, #32
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058aa:	e025      	b.n	80058f8 <HAL_SPI_Transmit+0x394>
 80058ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b0:	f7fb ff20 	bl	80016f4 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d803      	bhi.n	80058c8 <HAL_SPI_Transmit+0x364>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d102      	bne.n	80058ce <HAL_SPI_Transmit+0x36a>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d114      	bne.n	80058f8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f844 	bl	800595c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e02c      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f af79 	bne.w	80057f8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2200      	movs	r2, #0
 800590e:	2108      	movs	r1, #8
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f8c3 	bl	8005a9c <SPI_WaitOnFlagUntilTimeout>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f815 	bl	800595c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005950:	7efb      	ldrb	r3, [r7, #27]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop

0800595c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0210 	orr.w	r2, r2, #16
 800598a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6919      	ldr	r1, [r3, #16]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <SPI_CloseTransfer+0x13c>)
 80059a8:	400b      	ands	r3, r1
 80059aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80059ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d014      	beq.n	80059f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00f      	beq.n	80059f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0220 	orr.w	r2, r2, #32
 80059f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d014      	beq.n	8005a28 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00f      	beq.n	8005a28 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a26:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a38:	f043 0201 	orr.w	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a50:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00f      	beq.n	8005a7c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a62:	f043 0208 	orr.w	r2, r3, #8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a7a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005a8c:	bf00      	nop
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	fffffc90 	.word	0xfffffc90

08005a9c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005aac:	e010      	b.n	8005ad0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aae:	f7fb fe21 	bl	80016f4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d803      	bhi.n	8005ac6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d102      	bne.n	8005acc <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e00f      	b.n	8005af0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bf0c      	ite	eq
 8005ae0:	2301      	moveq	r3, #1
 8005ae2:	2300      	movne	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	79fb      	ldrb	r3, [r7, #7]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d0df      	beq.n	8005aae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	3307      	adds	r3, #7
 8005b16:	08db      	lsrs	r3, r3, #3
 8005b18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e049      	b.n	8005bd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f841 	bl	8005bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 f9ff 	bl	8005f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d001      	beq.n	8005c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e054      	b.n	8005cb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a26      	ldr	r2, [pc, #152]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d01d      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a21      	ldr	r2, [pc, #132]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1f      	ldr	r2, [pc, #124]	; (8005ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a1e      	ldr	r2, [pc, #120]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1c      	ldr	r2, [pc, #112]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_Base_Start_IT+0x80>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d115      	bne.n	8005c9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	4b19      	ldr	r3, [pc, #100]	; (8005cdc <HAL_TIM_Base_Start_IT+0xec>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b06      	cmp	r3, #6
 8005c80:	d015      	beq.n	8005cae <HAL_TIM_Base_Start_IT+0xbe>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c88:	d011      	beq.n	8005cae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0201 	orr.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9a:	e008      	b.n	8005cae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0201 	orr.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e000      	b.n	8005cb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40001800 	.word	0x40001800
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	00010007 	.word	0x00010007

08005ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0202 	mvn.w	r2, #2
 8005d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f905 	bl	8005f32 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8f7 	bl	8005f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f908 	bl	8005f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0204 	mvn.w	r2, #4
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8db 	bl	8005f32 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f8cd 	bl	8005f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8de 	bl	8005f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0208 	mvn.w	r2, #8
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f8b1 	bl	8005f32 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f8a3 	bl	8005f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8b4 	bl	8005f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d122      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d11b      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0210 	mvn.w	r2, #16
 8005e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f887 	bl	8005f32 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f879 	bl	8005f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f88a 	bl	8005f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d10e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0201 	mvn.w	r2, #1
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fa ff7e 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f914 	bl	80060b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d10e      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 f907 	bl	80060cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f838 	bl	8005f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0220 	mvn.w	r2, #32
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8c7 	bl	80060a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a40      	ldr	r2, [pc, #256]	; (8006084 <TIM_Base_SetConfig+0x114>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8e:	d00f      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a3d      	ldr	r2, [pc, #244]	; (8006088 <TIM_Base_SetConfig+0x118>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00b      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a3c      	ldr	r2, [pc, #240]	; (800608c <TIM_Base_SetConfig+0x11c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a3b      	ldr	r2, [pc, #236]	; (8006090 <TIM_Base_SetConfig+0x120>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a3a      	ldr	r2, [pc, #232]	; (8006094 <TIM_Base_SetConfig+0x124>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d108      	bne.n	8005fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2f      	ldr	r2, [pc, #188]	; (8006084 <TIM_Base_SetConfig+0x114>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01f      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd0:	d01b      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <TIM_Base_SetConfig+0x118>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d017      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <TIM_Base_SetConfig+0x11c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <TIM_Base_SetConfig+0x120>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00f      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a29      	ldr	r2, [pc, #164]	; (8006094 <TIM_Base_SetConfig+0x124>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00b      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a28      	ldr	r2, [pc, #160]	; (8006098 <TIM_Base_SetConfig+0x128>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a27      	ldr	r2, [pc, #156]	; (800609c <TIM_Base_SetConfig+0x12c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d003      	beq.n	800600a <TIM_Base_SetConfig+0x9a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a26      	ldr	r2, [pc, #152]	; (80060a0 <TIM_Base_SetConfig+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d108      	bne.n	800601c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <TIM_Base_SetConfig+0x114>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00f      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a12      	ldr	r2, [pc, #72]	; (8006094 <TIM_Base_SetConfig+0x124>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a11      	ldr	r2, [pc, #68]	; (8006098 <TIM_Base_SetConfig+0x128>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <TIM_Base_SetConfig+0x12c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0xf8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a0f      	ldr	r2, [pc, #60]	; (80060a0 <TIM_Base_SetConfig+0x130>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d103      	bne.n	8006070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40010000 	.word	0x40010000
 8006088:	40000400 	.word	0x40000400
 800608c:	40000800 	.word	0x40000800
 8006090:	40000c00 	.word	0x40000c00
 8006094:	40010400 	.word	0x40010400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800

080060a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e042      	b.n	8006178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d106      	bne.n	800610a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7fa ffbd 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2224      	movs	r2, #36	; 0x24
 800610e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f8ba 	bl	800629c <UART_SetConfig>
 8006128:	4603      	mov	r3, r0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e022      	b.n	8006178 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fe16 	bl	8006d6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800614e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800615e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fe9d 	bl	8006eb0 <UART_CheckIdleState>
 8006176:	4603      	mov	r3, r0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	2b20      	cmp	r3, #32
 8006198:	d17b      	bne.n	8006292 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_UART_Transmit+0x26>
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e074      	b.n	8006294 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2221      	movs	r2, #33	; 0x21
 80061b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061ba:	f7fb fa9b 	bl	80016f4 <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	88fa      	ldrh	r2, [r7, #6]
 80061c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d8:	d108      	bne.n	80061ec <HAL_UART_Transmit+0x6c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e003      	b.n	80061f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f4:	e030      	b.n	8006258 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 feff 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e03d      	b.n	8006294 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10b      	bne.n	8006236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3302      	adds	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e007      	b.n	8006246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1c8      	bne.n	80061f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2200      	movs	r2, #0
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fec8 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e006      	b.n	8006294 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3720      	adds	r7, #32
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b092      	sub	sp, #72	; 0x48
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	431a      	orrs	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4bbe      	ldr	r3, [pc, #760]	; (80065c4 <UART_SetConfig+0x328>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4ab3      	ldr	r2, [pc, #716]	; (80065c8 <UART_SetConfig+0x32c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006304:	4313      	orrs	r3, r2
 8006306:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	4baf      	ldr	r3, [pc, #700]	; (80065cc <UART_SetConfig+0x330>)
 8006310:	4013      	ands	r3, r2
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006318:	430b      	orrs	r3, r1
 800631a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	f023 010f 	bic.w	r1, r3, #15
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4aa6      	ldr	r2, [pc, #664]	; (80065d0 <UART_SetConfig+0x334>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d177      	bne.n	800642c <UART_SetConfig+0x190>
 800633c:	4ba5      	ldr	r3, [pc, #660]	; (80065d4 <UART_SetConfig+0x338>)
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006344:	2b28      	cmp	r3, #40	; 0x28
 8006346:	d86d      	bhi.n	8006424 <UART_SetConfig+0x188>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0xb4>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063f5 	.word	0x080063f5
 8006354:	08006425 	.word	0x08006425
 8006358:	08006425 	.word	0x08006425
 800635c:	08006425 	.word	0x08006425
 8006360:	08006425 	.word	0x08006425
 8006364:	08006425 	.word	0x08006425
 8006368:	08006425 	.word	0x08006425
 800636c:	08006425 	.word	0x08006425
 8006370:	080063fd 	.word	0x080063fd
 8006374:	08006425 	.word	0x08006425
 8006378:	08006425 	.word	0x08006425
 800637c:	08006425 	.word	0x08006425
 8006380:	08006425 	.word	0x08006425
 8006384:	08006425 	.word	0x08006425
 8006388:	08006425 	.word	0x08006425
 800638c:	08006425 	.word	0x08006425
 8006390:	08006405 	.word	0x08006405
 8006394:	08006425 	.word	0x08006425
 8006398:	08006425 	.word	0x08006425
 800639c:	08006425 	.word	0x08006425
 80063a0:	08006425 	.word	0x08006425
 80063a4:	08006425 	.word	0x08006425
 80063a8:	08006425 	.word	0x08006425
 80063ac:	08006425 	.word	0x08006425
 80063b0:	0800640d 	.word	0x0800640d
 80063b4:	08006425 	.word	0x08006425
 80063b8:	08006425 	.word	0x08006425
 80063bc:	08006425 	.word	0x08006425
 80063c0:	08006425 	.word	0x08006425
 80063c4:	08006425 	.word	0x08006425
 80063c8:	08006425 	.word	0x08006425
 80063cc:	08006425 	.word	0x08006425
 80063d0:	08006415 	.word	0x08006415
 80063d4:	08006425 	.word	0x08006425
 80063d8:	08006425 	.word	0x08006425
 80063dc:	08006425 	.word	0x08006425
 80063e0:	08006425 	.word	0x08006425
 80063e4:	08006425 	.word	0x08006425
 80063e8:	08006425 	.word	0x08006425
 80063ec:	08006425 	.word	0x08006425
 80063f0:	0800641d 	.word	0x0800641d
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e222      	b.n	8006842 <UART_SetConfig+0x5a6>
 80063fc:	2304      	movs	r3, #4
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e21e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006404:	2308      	movs	r3, #8
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e21a      	b.n	8006842 <UART_SetConfig+0x5a6>
 800640c:	2310      	movs	r3, #16
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e216      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006414:	2320      	movs	r3, #32
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e212      	b.n	8006842 <UART_SetConfig+0x5a6>
 800641c:	2340      	movs	r3, #64	; 0x40
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e20e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800642a:	e20a      	b.n	8006842 <UART_SetConfig+0x5a6>
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a69      	ldr	r2, [pc, #420]	; (80065d8 <UART_SetConfig+0x33c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d130      	bne.n	8006498 <UART_SetConfig+0x1fc>
 8006436:	4b67      	ldr	r3, [pc, #412]	; (80065d4 <UART_SetConfig+0x338>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	2b05      	cmp	r3, #5
 8006440:	d826      	bhi.n	8006490 <UART_SetConfig+0x1f4>
 8006442:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x1ac>)
 8006444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006448:	08006461 	.word	0x08006461
 800644c:	08006469 	.word	0x08006469
 8006450:	08006471 	.word	0x08006471
 8006454:	08006479 	.word	0x08006479
 8006458:	08006481 	.word	0x08006481
 800645c:	08006489 	.word	0x08006489
 8006460:	2300      	movs	r3, #0
 8006462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006466:	e1ec      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006468:	2304      	movs	r3, #4
 800646a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646e:	e1e8      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006470:	2308      	movs	r3, #8
 8006472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006476:	e1e4      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006478:	2310      	movs	r3, #16
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800647e:	e1e0      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006480:	2320      	movs	r3, #32
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006486:	e1dc      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e1d8      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e1d4      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a4f      	ldr	r2, [pc, #316]	; (80065dc <UART_SetConfig+0x340>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d130      	bne.n	8006504 <UART_SetConfig+0x268>
 80064a2:	4b4c      	ldr	r3, [pc, #304]	; (80065d4 <UART_SetConfig+0x338>)
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d826      	bhi.n	80064fc <UART_SetConfig+0x260>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <UART_SetConfig+0x218>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064cd 	.word	0x080064cd
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	080064dd 	.word	0x080064dd
 80064c0:	080064e5 	.word	0x080064e5
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064f5 	.word	0x080064f5
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e1b6      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064d4:	2304      	movs	r3, #4
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e1b2      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064dc:	2308      	movs	r3, #8
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e1ae      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e1aa      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064ec:	2320      	movs	r3, #32
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e1a6      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064f4:	2340      	movs	r3, #64	; 0x40
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e1a2      	b.n	8006842 <UART_SetConfig+0x5a6>
 80064fc:	2380      	movs	r3, #128	; 0x80
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e19e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a35      	ldr	r2, [pc, #212]	; (80065e0 <UART_SetConfig+0x344>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d130      	bne.n	8006570 <UART_SetConfig+0x2d4>
 800650e:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <UART_SetConfig+0x338>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b05      	cmp	r3, #5
 8006518:	d826      	bhi.n	8006568 <UART_SetConfig+0x2cc>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <UART_SetConfig+0x284>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006539 	.word	0x08006539
 8006524:	08006541 	.word	0x08006541
 8006528:	08006549 	.word	0x08006549
 800652c:	08006551 	.word	0x08006551
 8006530:	08006559 	.word	0x08006559
 8006534:	08006561 	.word	0x08006561
 8006538:	2300      	movs	r3, #0
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e180      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006540:	2304      	movs	r3, #4
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e17c      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006548:	2308      	movs	r3, #8
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654e:	e178      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006550:	2310      	movs	r3, #16
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e174      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006558:	2320      	movs	r3, #32
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e170      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e16c      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e168      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <UART_SetConfig+0x348>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d142      	bne.n	8006600 <UART_SetConfig+0x364>
 800657a:	4b16      	ldr	r3, [pc, #88]	; (80065d4 <UART_SetConfig+0x338>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b05      	cmp	r3, #5
 8006584:	d838      	bhi.n	80065f8 <UART_SetConfig+0x35c>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <UART_SetConfig+0x2f0>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065a5 	.word	0x080065a5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065b5 	.word	0x080065b5
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065e9 	.word	0x080065e9
 80065a0:	080065f1 	.word	0x080065f1
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e14a      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065ac:	2304      	movs	r3, #4
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e146      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065b4:	2308      	movs	r3, #8
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e142      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c2:	e13e      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065c4:	cfff69f3 	.word	0xcfff69f3
 80065c8:	58000c00 	.word	0x58000c00
 80065cc:	11fff4ff 	.word	0x11fff4ff
 80065d0:	40011000 	.word	0x40011000
 80065d4:	58024400 	.word	0x58024400
 80065d8:	40004400 	.word	0x40004400
 80065dc:	40004800 	.word	0x40004800
 80065e0:	40004c00 	.word	0x40004c00
 80065e4:	40005000 	.word	0x40005000
 80065e8:	2320      	movs	r3, #32
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ee:	e128      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065f0:	2340      	movs	r3, #64	; 0x40
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f6:	e124      	b.n	8006842 <UART_SetConfig+0x5a6>
 80065f8:	2380      	movs	r3, #128	; 0x80
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fe:	e120      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4acb      	ldr	r2, [pc, #812]	; (8006934 <UART_SetConfig+0x698>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d176      	bne.n	80066f8 <UART_SetConfig+0x45c>
 800660a:	4bcb      	ldr	r3, [pc, #812]	; (8006938 <UART_SetConfig+0x69c>)
 800660c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006612:	2b28      	cmp	r3, #40	; 0x28
 8006614:	d86c      	bhi.n	80066f0 <UART_SetConfig+0x454>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x380>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	080066c1 	.word	0x080066c1
 8006620:	080066f1 	.word	0x080066f1
 8006624:	080066f1 	.word	0x080066f1
 8006628:	080066f1 	.word	0x080066f1
 800662c:	080066f1 	.word	0x080066f1
 8006630:	080066f1 	.word	0x080066f1
 8006634:	080066f1 	.word	0x080066f1
 8006638:	080066f1 	.word	0x080066f1
 800663c:	080066c9 	.word	0x080066c9
 8006640:	080066f1 	.word	0x080066f1
 8006644:	080066f1 	.word	0x080066f1
 8006648:	080066f1 	.word	0x080066f1
 800664c:	080066f1 	.word	0x080066f1
 8006650:	080066f1 	.word	0x080066f1
 8006654:	080066f1 	.word	0x080066f1
 8006658:	080066f1 	.word	0x080066f1
 800665c:	080066d1 	.word	0x080066d1
 8006660:	080066f1 	.word	0x080066f1
 8006664:	080066f1 	.word	0x080066f1
 8006668:	080066f1 	.word	0x080066f1
 800666c:	080066f1 	.word	0x080066f1
 8006670:	080066f1 	.word	0x080066f1
 8006674:	080066f1 	.word	0x080066f1
 8006678:	080066f1 	.word	0x080066f1
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080066f1 	.word	0x080066f1
 8006684:	080066f1 	.word	0x080066f1
 8006688:	080066f1 	.word	0x080066f1
 800668c:	080066f1 	.word	0x080066f1
 8006690:	080066f1 	.word	0x080066f1
 8006694:	080066f1 	.word	0x080066f1
 8006698:	080066f1 	.word	0x080066f1
 800669c:	080066e1 	.word	0x080066e1
 80066a0:	080066f1 	.word	0x080066f1
 80066a4:	080066f1 	.word	0x080066f1
 80066a8:	080066f1 	.word	0x080066f1
 80066ac:	080066f1 	.word	0x080066f1
 80066b0:	080066f1 	.word	0x080066f1
 80066b4:	080066f1 	.word	0x080066f1
 80066b8:	080066f1 	.word	0x080066f1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e0bc      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e0b8      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e0b4      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e0b0      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066e0:	2320      	movs	r3, #32
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e6:	e0ac      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066e8:	2340      	movs	r3, #64	; 0x40
 80066ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ee:	e0a8      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066f6:	e0a4      	b.n	8006842 <UART_SetConfig+0x5a6>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a8f      	ldr	r2, [pc, #572]	; (800693c <UART_SetConfig+0x6a0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d130      	bne.n	8006764 <UART_SetConfig+0x4c8>
 8006702:	4b8d      	ldr	r3, [pc, #564]	; (8006938 <UART_SetConfig+0x69c>)
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b05      	cmp	r3, #5
 800670c:	d826      	bhi.n	800675c <UART_SetConfig+0x4c0>
 800670e:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x478>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	0800672d 	.word	0x0800672d
 8006718:	08006735 	.word	0x08006735
 800671c:	0800673d 	.word	0x0800673d
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e086      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006734:	2304      	movs	r3, #4
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e082      	b.n	8006842 <UART_SetConfig+0x5a6>
 800673c:	2308      	movs	r3, #8
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006742:	e07e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674a:	e07a      	b.n	8006842 <UART_SetConfig+0x5a6>
 800674c:	2320      	movs	r3, #32
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006752:	e076      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006754:	2340      	movs	r3, #64	; 0x40
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e072      	b.n	8006842 <UART_SetConfig+0x5a6>
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e06e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a75      	ldr	r2, [pc, #468]	; (8006940 <UART_SetConfig+0x6a4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d130      	bne.n	80067d0 <UART_SetConfig+0x534>
 800676e:	4b72      	ldr	r3, [pc, #456]	; (8006938 <UART_SetConfig+0x69c>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b05      	cmp	r3, #5
 8006778:	d826      	bhi.n	80067c8 <UART_SetConfig+0x52c>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UART_SetConfig+0x4e4>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006799 	.word	0x08006799
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067a9 	.word	0x080067a9
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e050      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067a0:	2304      	movs	r3, #4
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e04c      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067a8:	2308      	movs	r3, #8
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ae:	e048      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067b0:	2310      	movs	r3, #16
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b6:	e044      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067b8:	2320      	movs	r3, #32
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e040      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067c0:	2340      	movs	r3, #64	; 0x40
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e03c      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e038      	b.n	8006842 <UART_SetConfig+0x5a6>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a5b      	ldr	r2, [pc, #364]	; (8006944 <UART_SetConfig+0x6a8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d130      	bne.n	800683c <UART_SetConfig+0x5a0>
 80067da:	4b57      	ldr	r3, [pc, #348]	; (8006938 <UART_SetConfig+0x69c>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d826      	bhi.n	8006834 <UART_SetConfig+0x598>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x550>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006805 	.word	0x08006805
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	08006815 	.word	0x08006815
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006825 	.word	0x08006825
 8006800:	0800682d 	.word	0x0800682d
 8006804:	2302      	movs	r3, #2
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e01a      	b.n	8006842 <UART_SetConfig+0x5a6>
 800680c:	2304      	movs	r3, #4
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e016      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006814:	2308      	movs	r3, #8
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681a:	e012      	b.n	8006842 <UART_SetConfig+0x5a6>
 800681c:	2310      	movs	r3, #16
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006822:	e00e      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006824:	2320      	movs	r3, #32
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682a:	e00a      	b.n	8006842 <UART_SetConfig+0x5a6>
 800682c:	2340      	movs	r3, #64	; 0x40
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e006      	b.n	8006842 <UART_SetConfig+0x5a6>
 8006834:	2380      	movs	r3, #128	; 0x80
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e002      	b.n	8006842 <UART_SetConfig+0x5a6>
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a3f      	ldr	r2, [pc, #252]	; (8006944 <UART_SetConfig+0x6a8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	f040 80f8 	bne.w	8006a3e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800684e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006852:	2b20      	cmp	r3, #32
 8006854:	dc46      	bgt.n	80068e4 <UART_SetConfig+0x648>
 8006856:	2b02      	cmp	r3, #2
 8006858:	f2c0 8082 	blt.w	8006960 <UART_SetConfig+0x6c4>
 800685c:	3b02      	subs	r3, #2
 800685e:	2b1e      	cmp	r3, #30
 8006860:	d87e      	bhi.n	8006960 <UART_SetConfig+0x6c4>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0x5cc>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	080068eb 	.word	0x080068eb
 800686c:	08006961 	.word	0x08006961
 8006870:	080068f3 	.word	0x080068f3
 8006874:	08006961 	.word	0x08006961
 8006878:	08006961 	.word	0x08006961
 800687c:	08006961 	.word	0x08006961
 8006880:	08006903 	.word	0x08006903
 8006884:	08006961 	.word	0x08006961
 8006888:	08006961 	.word	0x08006961
 800688c:	08006961 	.word	0x08006961
 8006890:	08006961 	.word	0x08006961
 8006894:	08006961 	.word	0x08006961
 8006898:	08006961 	.word	0x08006961
 800689c:	08006961 	.word	0x08006961
 80068a0:	08006913 	.word	0x08006913
 80068a4:	08006961 	.word	0x08006961
 80068a8:	08006961 	.word	0x08006961
 80068ac:	08006961 	.word	0x08006961
 80068b0:	08006961 	.word	0x08006961
 80068b4:	08006961 	.word	0x08006961
 80068b8:	08006961 	.word	0x08006961
 80068bc:	08006961 	.word	0x08006961
 80068c0:	08006961 	.word	0x08006961
 80068c4:	08006961 	.word	0x08006961
 80068c8:	08006961 	.word	0x08006961
 80068cc:	08006961 	.word	0x08006961
 80068d0:	08006961 	.word	0x08006961
 80068d4:	08006961 	.word	0x08006961
 80068d8:	08006961 	.word	0x08006961
 80068dc:	08006961 	.word	0x08006961
 80068e0:	08006953 	.word	0x08006953
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d037      	beq.n	8006958 <UART_SetConfig+0x6bc>
 80068e8:	e03a      	b.n	8006960 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80068ea:	f7fe f8f5 	bl	8004ad8 <HAL_RCCEx_GetD3PCLK1Freq>
 80068ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80068f0:	e03c      	b.n	800696c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe f904 	bl	8004b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006900:	e034      	b.n	800696c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006902:	f107 0318 	add.w	r3, r7, #24
 8006906:	4618      	mov	r0, r3
 8006908:	f7fe fa50 	bl	8004dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006910:	e02c      	b.n	800696c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <UART_SetConfig+0x69c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <UART_SetConfig+0x69c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	08db      	lsrs	r3, r3, #3
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	4a07      	ldr	r2, [pc, #28]	; (8006948 <UART_SetConfig+0x6ac>)
 800692a:	fa22 f303 	lsr.w	r3, r2, r3
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006930:	e01c      	b.n	800696c <UART_SetConfig+0x6d0>
 8006932:	bf00      	nop
 8006934:	40011400 	.word	0x40011400
 8006938:	58024400 	.word	0x58024400
 800693c:	40007800 	.word	0x40007800
 8006940:	40007c00 	.word	0x40007c00
 8006944:	58000c00 	.word	0x58000c00
 8006948:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800694c:	4b9d      	ldr	r3, [pc, #628]	; (8006bc4 <UART_SetConfig+0x928>)
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006950:	e00c      	b.n	800696c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006952:	4b9d      	ldr	r3, [pc, #628]	; (8006bc8 <UART_SetConfig+0x92c>)
 8006954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006956:	e009      	b.n	800696c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695e:	e005      	b.n	800696c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800696a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 81de 	beq.w	8006d30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	4a94      	ldr	r2, [pc, #592]	; (8006bcc <UART_SetConfig+0x930>)
 800697a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800697e:	461a      	mov	r2, r3
 8006980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006982:	fbb3 f3f2 	udiv	r3, r3, r2
 8006986:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	005b      	lsls	r3, r3, #1
 8006990:	4413      	add	r3, r2
 8006992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006994:	429a      	cmp	r2, r3
 8006996:	d305      	bcc.n	80069a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800699e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d903      	bls.n	80069ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80069aa:	e1c1      	b.n	8006d30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2200      	movs	r2, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	60fa      	str	r2, [r7, #12]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b8:	4a84      	ldr	r2, [pc, #528]	; (8006bcc <UART_SetConfig+0x930>)
 80069ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2200      	movs	r2, #0
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	607a      	str	r2, [r7, #4]
 80069c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069ce:	f7f9 fc87 	bl	80002e0 <__aeabi_uldivmod>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	020b      	lsls	r3, r1, #8
 80069e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069e8:	0202      	lsls	r2, r0, #8
 80069ea:	6979      	ldr	r1, [r7, #20]
 80069ec:	6849      	ldr	r1, [r1, #4]
 80069ee:	0849      	lsrs	r1, r1, #1
 80069f0:	2000      	movs	r0, #0
 80069f2:	460c      	mov	r4, r1
 80069f4:	4605      	mov	r5, r0
 80069f6:	eb12 0804 	adds.w	r8, r2, r4
 80069fa:	eb43 0905 	adc.w	r9, r3, r5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	469a      	mov	sl, r3
 8006a06:	4693      	mov	fp, r2
 8006a08:	4652      	mov	r2, sl
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7f9 fc66 	bl	80002e0 <__aeabi_uldivmod>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4613      	mov	r3, r2
 8006a1a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a22:	d308      	bcc.n	8006a36 <UART_SetConfig+0x79a>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2a:	d204      	bcs.n	8006a36 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e17c      	b.n	8006d30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a3c:	e178      	b.n	8006d30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a46:	f040 80c5 	bne.w	8006bd4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	dc48      	bgt.n	8006ae4 <UART_SetConfig+0x848>
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	db7b      	blt.n	8006b4e <UART_SetConfig+0x8b2>
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d879      	bhi.n	8006b4e <UART_SetConfig+0x8b2>
 8006a5a:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x7c4>)
 8006a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a60:	08006aeb 	.word	0x08006aeb
 8006a64:	08006af3 	.word	0x08006af3
 8006a68:	08006b4f 	.word	0x08006b4f
 8006a6c:	08006b4f 	.word	0x08006b4f
 8006a70:	08006afb 	.word	0x08006afb
 8006a74:	08006b4f 	.word	0x08006b4f
 8006a78:	08006b4f 	.word	0x08006b4f
 8006a7c:	08006b4f 	.word	0x08006b4f
 8006a80:	08006b0b 	.word	0x08006b0b
 8006a84:	08006b4f 	.word	0x08006b4f
 8006a88:	08006b4f 	.word	0x08006b4f
 8006a8c:	08006b4f 	.word	0x08006b4f
 8006a90:	08006b4f 	.word	0x08006b4f
 8006a94:	08006b4f 	.word	0x08006b4f
 8006a98:	08006b4f 	.word	0x08006b4f
 8006a9c:	08006b4f 	.word	0x08006b4f
 8006aa0:	08006b1b 	.word	0x08006b1b
 8006aa4:	08006b4f 	.word	0x08006b4f
 8006aa8:	08006b4f 	.word	0x08006b4f
 8006aac:	08006b4f 	.word	0x08006b4f
 8006ab0:	08006b4f 	.word	0x08006b4f
 8006ab4:	08006b4f 	.word	0x08006b4f
 8006ab8:	08006b4f 	.word	0x08006b4f
 8006abc:	08006b4f 	.word	0x08006b4f
 8006ac0:	08006b4f 	.word	0x08006b4f
 8006ac4:	08006b4f 	.word	0x08006b4f
 8006ac8:	08006b4f 	.word	0x08006b4f
 8006acc:	08006b4f 	.word	0x08006b4f
 8006ad0:	08006b4f 	.word	0x08006b4f
 8006ad4:	08006b4f 	.word	0x08006b4f
 8006ad8:	08006b4f 	.word	0x08006b4f
 8006adc:	08006b4f 	.word	0x08006b4f
 8006ae0:	08006b41 	.word	0x08006b41
 8006ae4:	2b40      	cmp	r3, #64	; 0x40
 8006ae6:	d02e      	beq.n	8006b46 <UART_SetConfig+0x8aa>
 8006ae8:	e031      	b.n	8006b4e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aea:	f7fc fd7d 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8006aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006af0:	e033      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af2:	f7fc fd8f 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 8006af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006af8:	e02f      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe f800 	bl	8004b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b08:	e027      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b0a:	f107 0318 	add.w	r3, r7, #24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe f94c 	bl	8004dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b18:	e01f      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b1a:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <UART_SetConfig+0x934>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b26:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <UART_SetConfig+0x934>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	08db      	lsrs	r3, r3, #3
 8006b2c:	f003 0303 	and.w	r3, r3, #3
 8006b30:	4a24      	ldr	r2, [pc, #144]	; (8006bc4 <UART_SetConfig+0x928>)
 8006b32:	fa22 f303 	lsr.w	r3, r2, r3
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b38:	e00f      	b.n	8006b5a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b3a:	4b22      	ldr	r3, [pc, #136]	; (8006bc4 <UART_SetConfig+0x928>)
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3e:	e00c      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <UART_SetConfig+0x92c>)
 8006b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b44:	e009      	b.n	8006b5a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b4c:	e005      	b.n	8006b5a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80e7 	beq.w	8006d30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	4a19      	ldr	r2, [pc, #100]	; (8006bcc <UART_SetConfig+0x930>)
 8006b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b74:	005a      	lsls	r2, r3, #1
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	441a      	add	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b86:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	2b0f      	cmp	r3, #15
 8006b8c:	d916      	bls.n	8006bbc <UART_SetConfig+0x920>
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b94:	d212      	bcs.n	8006bbc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f023 030f 	bic.w	r3, r3, #15
 8006b9e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e0b9      	b.n	8006d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006bc2:	e0b5      	b.n	8006d30 <UART_SetConfig+0xa94>
 8006bc4:	03d09000 	.word	0x03d09000
 8006bc8:	003d0900 	.word	0x003d0900
 8006bcc:	08012270 	.word	0x08012270
 8006bd0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bd4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	dc49      	bgt.n	8006c70 <UART_SetConfig+0x9d4>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	db7c      	blt.n	8006cda <UART_SetConfig+0xa3e>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d87a      	bhi.n	8006cda <UART_SetConfig+0xa3e>
 8006be4:	a201      	add	r2, pc, #4	; (adr r2, 8006bec <UART_SetConfig+0x950>)
 8006be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bea:	bf00      	nop
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c7f 	.word	0x08006c7f
 8006bf4:	08006cdb 	.word	0x08006cdb
 8006bf8:	08006cdb 	.word	0x08006cdb
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006cdb 	.word	0x08006cdb
 8006c04:	08006cdb 	.word	0x08006cdb
 8006c08:	08006cdb 	.word	0x08006cdb
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006cdb 	.word	0x08006cdb
 8006c14:	08006cdb 	.word	0x08006cdb
 8006c18:	08006cdb 	.word	0x08006cdb
 8006c1c:	08006cdb 	.word	0x08006cdb
 8006c20:	08006cdb 	.word	0x08006cdb
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006cdb 	.word	0x08006cdb
 8006c2c:	08006ca7 	.word	0x08006ca7
 8006c30:	08006cdb 	.word	0x08006cdb
 8006c34:	08006cdb 	.word	0x08006cdb
 8006c38:	08006cdb 	.word	0x08006cdb
 8006c3c:	08006cdb 	.word	0x08006cdb
 8006c40:	08006cdb 	.word	0x08006cdb
 8006c44:	08006cdb 	.word	0x08006cdb
 8006c48:	08006cdb 	.word	0x08006cdb
 8006c4c:	08006cdb 	.word	0x08006cdb
 8006c50:	08006cdb 	.word	0x08006cdb
 8006c54:	08006cdb 	.word	0x08006cdb
 8006c58:	08006cdb 	.word	0x08006cdb
 8006c5c:	08006cdb 	.word	0x08006cdb
 8006c60:	08006cdb 	.word	0x08006cdb
 8006c64:	08006cdb 	.word	0x08006cdb
 8006c68:	08006cdb 	.word	0x08006cdb
 8006c6c:	08006ccd 	.word	0x08006ccd
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	d02e      	beq.n	8006cd2 <UART_SetConfig+0xa36>
 8006c74:	e031      	b.n	8006cda <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7fc fcb7 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c7c:	e033      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7e:	f7fc fcc9 	bl	8003614 <HAL_RCC_GetPCLK2Freq>
 8006c82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c84:	e02f      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd ff3a 	bl	8004b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c94:	e027      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe f886 	bl	8004dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca4:	e01f      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <UART_SetConfig+0xac0>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <UART_SetConfig+0xac0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	4a28      	ldr	r2, [pc, #160]	; (8006d60 <UART_SetConfig+0xac4>)
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006cc6:	4b26      	ldr	r3, [pc, #152]	; (8006d60 <UART_SetConfig+0xac4>)
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cca:	e00c      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <UART_SetConfig+0xac8>)
 8006cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ce4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d021      	beq.n	8006d30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	4a1d      	ldr	r2, [pc, #116]	; (8006d68 <UART_SetConfig+0xacc>)
 8006cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b0f      	cmp	r3, #15
 8006d14:	d909      	bls.n	8006d2a <UART_SetConfig+0xa8e>
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d1c:	d205      	bcs.n	8006d2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	e002      	b.n	8006d30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2200      	movs	r2, #0
 8006d44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3748      	adds	r7, #72	; 0x48
 8006d54:	46bd      	mov	sp, r7
 8006d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d5a:	bf00      	nop
 8006d5c:	58024400 	.word	0x58024400
 8006d60:	03d09000 	.word	0x03d09000
 8006d64:	003d0900 	.word	0x003d0900
 8006d68:	08012270 	.word	0x08012270

08006d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01a      	beq.n	8006e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6a:	d10a      	bne.n	8006e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b098      	sub	sp, #96	; 0x60
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ec0:	f7fa fc18 	bl	80016f4 <HAL_GetTick>
 8006ec4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d12f      	bne.n	8006f34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006edc:	2200      	movs	r2, #0
 8006ede:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f88e 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d022      	beq.n	8006f34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e063      	b.n	8006ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d149      	bne.n	8006fd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f857 	bl	8007004 <UART_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d03c      	beq.n	8006fd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	623b      	str	r3, [r7, #32]
   return(result);
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e6      	bne.n	8006f5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f023 0301 	bic.w	r3, r3, #1
 8006fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fae:	61fa      	str	r2, [r7, #28]
 8006fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	69b9      	ldr	r1, [r7, #24]
 8006fb4:	69fa      	ldr	r2, [r7, #28]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e5      	bne.n	8006f8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e012      	b.n	8006ffc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3758      	adds	r7, #88	; 0x58
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007014:	e049      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d045      	beq.n	80070aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fa fb69 	bl	80016f4 <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <UART_WaitOnFlagUntilTimeout+0x30>
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e048      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	d031      	beq.n	80070aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f003 0308 	and.w	r3, r3, #8
 8007050:	2b08      	cmp	r3, #8
 8007052:	d110      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2208      	movs	r2, #8
 800705a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f839 	bl	80070d4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2208      	movs	r2, #8
 8007066:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e029      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007084:	d111      	bne.n	80070aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800708e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f81f 	bl	80070d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e00f      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69da      	ldr	r2, [r3, #28]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4013      	ands	r3, r2
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d0a6      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b095      	sub	sp, #84	; 0x54
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fa:	643b      	str	r3, [r7, #64]	; 0x40
 80070fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	61fb      	str	r3, [r7, #28]
   return(result);
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <UART_EndRxTransfer+0xc8>)
 8007122:	4013      	ands	r3, r2
 8007124:	64bb      	str	r3, [r7, #72]	; 0x48
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e5      	bne.n	800710e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007146:	2b01      	cmp	r3, #1
 8007148:	d118      	bne.n	800717c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60bb      	str	r3, [r7, #8]
   return(result);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	647b      	str	r3, [r7, #68]	; 0x44
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6979      	ldr	r1, [r7, #20]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	613b      	str	r3, [r7, #16]
   return(result);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e6      	bne.n	800714a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007190:	bf00      	nop
 8007192:	3754      	adds	r7, #84	; 0x54
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	effffffe 	.word	0xeffffffe

080071a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e027      	b.n	8007206 <HAL_UARTEx_DisableFifoMode+0x66>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007226:	2302      	movs	r3, #2
 8007228:	e02d      	b.n	8007286 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2224      	movs	r2, #36	; 0x24
 8007236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f850 	bl	800730c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e02d      	b.n	8007302 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2224      	movs	r2, #36	; 0x24
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f812 	bl	800730c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007318:	2b00      	cmp	r3, #0
 800731a:	d108      	bne.n	800732e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800732c:	e031      	b.n	8007392 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800732e:	2310      	movs	r3, #16
 8007330:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007332:	2310      	movs	r3, #16
 8007334:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	0e5b      	lsrs	r3, r3, #25
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	0f5b      	lsrs	r3, r3, #29
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	7b3a      	ldrb	r2, [r7, #12]
 800735a:	4911      	ldr	r1, [pc, #68]	; (80073a0 <UARTEx_SetNbDataToProcess+0x94>)
 800735c:	5c8a      	ldrb	r2, [r1, r2]
 800735e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007362:	7b3a      	ldrb	r2, [r7, #12]
 8007364:	490f      	ldr	r1, [pc, #60]	; (80073a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007366:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007368:	fb93 f3f2 	sdiv	r3, r3, r2
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	7b7a      	ldrb	r2, [r7, #13]
 8007378:	4909      	ldr	r1, [pc, #36]	; (80073a0 <UARTEx_SetNbDataToProcess+0x94>)
 800737a:	5c8a      	ldrb	r2, [r1, r2]
 800737c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007380:	7b7a      	ldrb	r2, [r7, #13]
 8007382:	4908      	ldr	r1, [pc, #32]	; (80073a4 <UARTEx_SetNbDataToProcess+0x98>)
 8007384:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007386:	fb93 f3f2 	sdiv	r3, r3, r2
 800738a:	b29a      	uxth	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007392:	bf00      	nop
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	08012288 	.word	0x08012288
 80073a4:	08012290 	.word	0x08012290

080073a8 <__NVIC_SetPriority>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	db0a      	blt.n	80073d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	490c      	ldr	r1, [pc, #48]	; (80073f4 <__NVIC_SetPriority+0x4c>)
 80073c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073c6:	0112      	lsls	r2, r2, #4
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	440b      	add	r3, r1
 80073cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80073d0:	e00a      	b.n	80073e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	4908      	ldr	r1, [pc, #32]	; (80073f8 <__NVIC_SetPriority+0x50>)
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	3b04      	subs	r3, #4
 80073e0:	0112      	lsls	r2, r2, #4
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	440b      	add	r3, r1
 80073e6:	761a      	strb	r2, [r3, #24]
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	e000e100 	.word	0xe000e100
 80073f8:	e000ed00 	.word	0xe000ed00

080073fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <SysTick_Handler+0x1c>)
 8007402:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007404:	f002 f964 	bl	80096d0 <xTaskGetSchedulerState>
 8007408:	4603      	mov	r3, r0
 800740a:	2b01      	cmp	r3, #1
 800740c:	d001      	beq.n	8007412 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800740e:	f000 fd9b 	bl	8007f48 <xPortSysTickHandler>
  }
}
 8007412:	bf00      	nop
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	e000e010 	.word	0xe000e010

0800741c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007420:	2100      	movs	r1, #0
 8007422:	f06f 0004 	mvn.w	r0, #4
 8007426:	f7ff ffbf 	bl	80073a8 <__NVIC_SetPriority>
#endif
}
 800742a:	bf00      	nop
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007436:	f3ef 8305 	mrs	r3, IPSR
 800743a:	603b      	str	r3, [r7, #0]
  return(result);
 800743c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007442:	f06f 0305 	mvn.w	r3, #5
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	e00c      	b.n	8007464 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800744a:	4b0a      	ldr	r3, [pc, #40]	; (8007474 <osKernelInitialize+0x44>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <osKernelInitialize+0x44>)
 8007454:	2201      	movs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007458:	2300      	movs	r3, #0
 800745a:	607b      	str	r3, [r7, #4]
 800745c:	e002      	b.n	8007464 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007464:	687b      	ldr	r3, [r7, #4]
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	240003cc 	.word	0x240003cc

08007478 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800747e:	f3ef 8305 	mrs	r3, IPSR
 8007482:	603b      	str	r3, [r7, #0]
  return(result);
 8007484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <osKernelStart+0x1a>
    stat = osErrorISR;
 800748a:	f06f 0305 	mvn.w	r3, #5
 800748e:	607b      	str	r3, [r7, #4]
 8007490:	e010      	b.n	80074b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <osKernelStart+0x48>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d109      	bne.n	80074ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800749a:	f7ff ffbf 	bl	800741c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800749e:	4b08      	ldr	r3, [pc, #32]	; (80074c0 <osKernelStart+0x48>)
 80074a0:	2202      	movs	r2, #2
 80074a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074a4:	f001 fcb8 	bl	8008e18 <vTaskStartScheduler>
      stat = osOK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	607b      	str	r3, [r7, #4]
 80074ac:	e002      	b.n	80074b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074ae:	f04f 33ff 	mov.w	r3, #4294967295
 80074b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074b4:	687b      	ldr	r3, [r7, #4]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	240003cc 	.word	0x240003cc

080074c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08e      	sub	sp, #56	; 0x38
 80074c8:	af04      	add	r7, sp, #16
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074d4:	f3ef 8305 	mrs	r3, IPSR
 80074d8:	617b      	str	r3, [r7, #20]
  return(result);
 80074da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d17e      	bne.n	80075de <osThreadNew+0x11a>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d07b      	beq.n	80075de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80074e6:	2380      	movs	r3, #128	; 0x80
 80074e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80074ea:	2318      	movs	r3, #24
 80074ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80074f2:	f04f 33ff 	mov.w	r3, #4294967295
 80074f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d045      	beq.n	800758a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <osThreadNew+0x48>
        name = attr->name;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <osThreadNew+0x6e>
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b38      	cmp	r3, #56	; 0x38
 8007524:	d805      	bhi.n	8007532 <osThreadNew+0x6e>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <osThreadNew+0x72>
        return (NULL);
 8007532:	2300      	movs	r3, #0
 8007534:	e054      	b.n	80075e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00e      	beq.n	800756c <osThreadNew+0xa8>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	2bbb      	cmp	r3, #187	; 0xbb
 8007554:	d90a      	bls.n	800756c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800755a:	2b00      	cmp	r3, #0
 800755c:	d006      	beq.n	800756c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d002      	beq.n	800756c <osThreadNew+0xa8>
        mem = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e010      	b.n	800758e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10c      	bne.n	800758e <osThreadNew+0xca>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <osThreadNew+0xca>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <osThreadNew+0xca>
          mem = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]
 8007588:	e001      	b.n	800758e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d110      	bne.n	80075b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800759c:	9202      	str	r2, [sp, #8]
 800759e:	9301      	str	r3, [sp, #4]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6a3a      	ldr	r2, [r7, #32]
 80075a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fa48 	bl	8008a40 <xTaskCreateStatic>
 80075b0:	4603      	mov	r3, r0
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	e013      	b.n	80075de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d110      	bne.n	80075de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f107 0310 	add.w	r3, r7, #16
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fa93 	bl	8008afa <xTaskCreate>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d001      	beq.n	80075de <osThreadNew+0x11a>
            hTask = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80075de:	693b      	ldr	r3, [r7, #16]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3728      	adds	r7, #40	; 0x28
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075f0:	f3ef 8305 	mrs	r3, IPSR
 80075f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80075f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <osDelay+0x1c>
    stat = osErrorISR;
 80075fc:	f06f 0305 	mvn.w	r3, #5
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e007      	b.n	8007614 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <osDelay+0x2c>
      vTaskDelay(ticks);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f001 fbce 	bl	8008db0 <vTaskDelay>
    }
  }

  return (stat);
 8007614:	68fb      	ldr	r3, [r7, #12]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a07      	ldr	r2, [pc, #28]	; (800764c <vApplicationGetIdleTaskMemory+0x2c>)
 8007630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vApplicationGetIdleTaskMemory+0x30>)
 8007636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2280      	movs	r2, #128	; 0x80
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	240003d0 	.word	0x240003d0
 8007650:	2400048c 	.word	0x2400048c

08007654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a07      	ldr	r2, [pc, #28]	; (8007680 <vApplicationGetTimerTaskMemory+0x2c>)
 8007664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4a06      	ldr	r2, [pc, #24]	; (8007684 <vApplicationGetTimerTaskMemory+0x30>)
 800766a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007672:	601a      	str	r2, [r3, #0]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	2400068c 	.word	0x2400068c
 8007684:	24000748 	.word	0x24000748

08007688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007694:	f001 fc30 	bl	8008ef8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007698:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <pvPortMalloc+0x180>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80076a0:	f000 f920 	bl	80078e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80076a4:	4b59      	ldr	r3, [pc, #356]	; (800780c <pvPortMalloc+0x184>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4013      	ands	r3, r2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 8093 	bne.w	80077d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01d      	beq.n	80076f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80076b8:	2208      	movs	r2, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	3308      	adds	r3, #8
 80076d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d06e      	beq.n	80077d8 <pvPortMalloc+0x150>
 80076fa:	4b45      	ldr	r3, [pc, #276]	; (8007810 <pvPortMalloc+0x188>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	429a      	cmp	r2, r3
 8007702:	d869      	bhi.n	80077d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007704:	4b43      	ldr	r3, [pc, #268]	; (8007814 <pvPortMalloc+0x18c>)
 8007706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007708:	4b42      	ldr	r3, [pc, #264]	; (8007814 <pvPortMalloc+0x18c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800770e:	e004      	b.n	800771a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d903      	bls.n	800772c <pvPortMalloc+0xa4>
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f1      	bne.n	8007710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <pvPortMalloc+0x180>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	429a      	cmp	r2, r3
 8007734:	d050      	beq.n	80077d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2208      	movs	r2, #8
 800773c:	4413      	add	r3, r2
 800773e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	1ad2      	subs	r2, r2, r3
 8007750:	2308      	movs	r3, #8
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	429a      	cmp	r2, r3
 8007756:	d91f      	bls.n	8007798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00a      	beq.n	8007780 <pvPortMalloc+0xf8>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	613b      	str	r3, [r7, #16]
}
 800777c:	bf00      	nop
 800777e:	e7fe      	b.n	800777e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007792:	69b8      	ldr	r0, [r7, #24]
 8007794:	f000 f908 	bl	80079a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007798:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <pvPortMalloc+0x188>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <pvPortMalloc+0x188>)
 80077a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077a6:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <pvPortMalloc+0x188>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	4b1b      	ldr	r3, [pc, #108]	; (8007818 <pvPortMalloc+0x190>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d203      	bcs.n	80077ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077b2:	4b17      	ldr	r3, [pc, #92]	; (8007810 <pvPortMalloc+0x188>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	; (8007818 <pvPortMalloc+0x190>)
 80077b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <pvPortMalloc+0x184>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	431a      	orrs	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077ce:	4b13      	ldr	r3, [pc, #76]	; (800781c <pvPortMalloc+0x194>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3301      	adds	r3, #1
 80077d4:	4a11      	ldr	r2, [pc, #68]	; (800781c <pvPortMalloc+0x194>)
 80077d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077d8:	f001 fb9c 	bl	8008f14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <pvPortMalloc+0x174>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <pvPortMalloc+0x172>
	return pvReturn;
 80077fc:	69fb      	ldr	r3, [r7, #28]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	; 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	24004750 	.word	0x24004750
 800780c:	24004764 	.word	0x24004764
 8007810:	24004754 	.word	0x24004754
 8007814:	24004748 	.word	0x24004748
 8007818:	24004758 	.word	0x24004758
 800781c:	2400475c 	.word	0x2400475c

08007820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d04d      	beq.n	80078ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007832:	2308      	movs	r3, #8
 8007834:	425b      	negs	r3, r3
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b24      	ldr	r3, [pc, #144]	; (80078d8 <vPortFree+0xb8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10a      	bne.n	8007864 <vPortFree+0x44>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <vPortFree+0x62>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	60bb      	str	r3, [r7, #8]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <vPortFree+0xb8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4013      	ands	r3, r2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01e      	beq.n	80078ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d11a      	bne.n	80078ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <vPortFree+0xb8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	401a      	ands	r2, r3
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80078a8:	f001 fb26 	bl	8008ef8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <vPortFree+0xbc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <vPortFree+0xbc>)
 80078b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078ba:	6938      	ldr	r0, [r7, #16]
 80078bc:	f000 f874 	bl	80079a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <vPortFree+0xc0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vPortFree+0xc0>)
 80078c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078ca:	f001 fb23 	bl	8008f14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	24004764 	.word	0x24004764
 80078dc:	24004754 	.word	0x24004754
 80078e0:	24004760 	.word	0x24004760

080078e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80078ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <prvHeapInit+0xac>)
 80078f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3307      	adds	r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a1f      	ldr	r2, [pc, #124]	; (8007990 <prvHeapInit+0xac>)
 8007914:	4413      	add	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <prvHeapInit+0xb0>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <prvHeapInit+0xb0>)
 8007924:	2200      	movs	r2, #0
 8007926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007930:	2208      	movs	r2, #8
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0307 	bic.w	r3, r3, #7
 800793e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <prvHeapInit+0xb4>)
 8007944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <prvHeapInit+0xb4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800794e:	4b12      	ldr	r3, [pc, #72]	; (8007998 <prvHeapInit+0xb4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <prvHeapInit+0xb4>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <prvHeapInit+0xb8>)
 8007972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4a09      	ldr	r2, [pc, #36]	; (80079a0 <prvHeapInit+0xbc>)
 800797a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <prvHeapInit+0xc0>)
 800797e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007982:	601a      	str	r2, [r3, #0]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	24000b48 	.word	0x24000b48
 8007994:	24004748 	.word	0x24004748
 8007998:	24004750 	.word	0x24004750
 800799c:	24004758 	.word	0x24004758
 80079a0:	24004754 	.word	0x24004754
 80079a4:	24004764 	.word	0x24004764

080079a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079b0:	4b28      	ldr	r3, [pc, #160]	; (8007a54 <prvInsertBlockIntoFreeList+0xac>)
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e002      	b.n	80079bc <prvInsertBlockIntoFreeList+0x14>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d8f7      	bhi.n	80079b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d108      	bne.n	80079ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	441a      	add	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d118      	bne.n	8007a30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b15      	ldr	r3, [pc, #84]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d00d      	beq.n	8007a26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	441a      	add	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e008      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a26:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <prvInsertBlockIntoFreeList+0xb0>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e003      	b.n	8007a38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	24004748 	.word	0x24004748
 8007a58:	24004750 	.word	0x24004750

08007a5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0208 	add.w	r2, r3, #8
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f04f 32ff 	mov.w	r2, #4294967295
 8007a74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f103 0208 	add.w	r2, r3, #8
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0208 	add.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afe:	b480      	push	{r7}
 8007b00:	b085      	sub	sp, #20
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d103      	bne.n	8007b1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e00c      	b.n	8007b38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3308      	adds	r3, #8
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <vListInsert+0x2e>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d2f6      	bcs.n	8007b26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	683a      	ldr	r2, [r7, #0]
 8007b46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6892      	ldr	r2, [r2, #8]
 8007b86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6852      	ldr	r2, [r2, #4]
 8007b90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d103      	bne.n	8007ba4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1e5a      	subs	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	3b04      	subs	r3, #4
 8007be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f023 0201 	bic.w	r2, r3, #1
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3b04      	subs	r3, #4
 8007bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <pxPortInitialiseStack+0x64>)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b14      	subs	r3, #20
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b04      	subs	r3, #4
 8007c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f06f 0202 	mvn.w	r2, #2
 8007c12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3b20      	subs	r3, #32
 8007c18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	08007c2d 	.word	0x08007c2d

08007c2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c36:	4b12      	ldr	r3, [pc, #72]	; (8007c80 <prvTaskExitError+0x54>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3e:	d00a      	beq.n	8007c56 <prvTaskExitError+0x2a>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	60fb      	str	r3, [r7, #12]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <prvTaskExitError+0x28>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	60bb      	str	r3, [r7, #8]
}
 8007c68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c6a:	bf00      	nop
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0fc      	beq.n	8007c6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	24000020 	.word	0x24000020
	...

08007c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	240047b0 	.word	0x240047b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <prvPortStartFirstTask+0x24>)
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	6800      	ldr	r0, [r0, #0]
 8007cbe:	f380 8808 	msr	MSP, r0
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8814 	msr	CONTROL, r0
 8007cca:	b662      	cpsie	i
 8007ccc:	b661      	cpsie	f
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	df00      	svc	0
 8007cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cda:	bf00      	nop
 8007cdc:	e000ed08 	.word	0xe000ed08

08007ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ce6:	4b46      	ldr	r3, [pc, #280]	; (8007e00 <xPortStartScheduler+0x120>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a46      	ldr	r2, [pc, #280]	; (8007e04 <xPortStartScheduler+0x124>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d10a      	bne.n	8007d06 <xPortStartScheduler+0x26>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
 8007d04:	e7fe      	b.n	8007d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d06:	4b3e      	ldr	r3, [pc, #248]	; (8007e00 <xPortStartScheduler+0x120>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a3f      	ldr	r2, [pc, #252]	; (8007e08 <xPortStartScheduler+0x128>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d10a      	bne.n	8007d26 <xPortStartScheduler+0x46>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	60fb      	str	r3, [r7, #12]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d26:	4b39      	ldr	r3, [pc, #228]	; (8007e0c <xPortStartScheduler+0x12c>)
 8007d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <xPortStartScheduler+0x130>)
 8007d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d4e:	4b31      	ldr	r3, [pc, #196]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d50:	2207      	movs	r2, #7
 8007d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d54:	e009      	b.n	8007d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007d56:	4b2f      	ldr	r3, [pc, #188]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	4a2d      	ldr	r2, [pc, #180]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d0ef      	beq.n	8007d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d76:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1c3 0307 	rsb	r3, r3, #7
 8007d7e:	2b04      	cmp	r3, #4
 8007d80:	d00a      	beq.n	8007d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60bb      	str	r3, [r7, #8]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <xPortStartScheduler+0x134>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <xPortStartScheduler+0x134>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <xPortStartScheduler+0x134>)
 8007dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007db6:	4b18      	ldr	r3, [pc, #96]	; (8007e18 <xPortStartScheduler+0x138>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a14      	ldr	r2, [pc, #80]	; (8007e18 <xPortStartScheduler+0x138>)
 8007dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007dce:	f000 f8dd 	bl	8007f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <xPortStartScheduler+0x13c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007dd8:	f000 f8fc 	bl	8007fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ddc:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <xPortStartScheduler+0x140>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a0f      	ldr	r2, [pc, #60]	; (8007e20 <xPortStartScheduler+0x140>)
 8007de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007de8:	f7ff ff66 	bl	8007cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007dec:	f001 f9fa 	bl	80091e4 <vTaskSwitchContext>
	prvTaskExitError();
 8007df0:	f7ff ff1c 	bl	8007c2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	e000ed00 	.word	0xe000ed00
 8007e04:	410fc271 	.word	0x410fc271
 8007e08:	410fc270 	.word	0x410fc270
 8007e0c:	e000e400 	.word	0xe000e400
 8007e10:	24004768 	.word	0x24004768
 8007e14:	2400476c 	.word	0x2400476c
 8007e18:	e000ed20 	.word	0xe000ed20
 8007e1c:	24000020 	.word	0x24000020
 8007e20:	e000ef34 	.word	0xe000ef34

08007e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	607b      	str	r3, [r7, #4]
}
 8007e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <vPortEnterCritical+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10f      	bne.n	8007e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <vPortEnterCritical+0x5c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	603b      	str	r3, [r7, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <vPortEnterCritical+0x4a>
	}
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	24000020 	.word	0x24000020
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e8a:	4b12      	ldr	r3, [pc, #72]	; (8007ed4 <vPortExitCritical+0x50>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <vPortExitCritical+0x24>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	607b      	str	r3, [r7, #4]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4a09      	ldr	r2, [pc, #36]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eb2:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <vPortExitCritical+0x50>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d105      	bne.n	8007ec6 <vPortExitCritical+0x42>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	24000020 	.word	0x24000020
	...

08007ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ee0:	f3ef 8009 	mrs	r0, PSP
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <pxCurrentTCBConst>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	f01e 0f10 	tst.w	lr, #16
 8007ef0:	bf08      	it	eq
 8007ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efa:	6010      	str	r0, [r2, #0]
 8007efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f04:	f380 8811 	msr	BASEPRI, r0
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f001 f968 	bl	80091e4 <vTaskSwitchContext>
 8007f14:	f04f 0000 	mov.w	r0, #0
 8007f18:	f380 8811 	msr	BASEPRI, r0
 8007f1c:	bc09      	pop	{r0, r3}
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	6808      	ldr	r0, [r1, #0]
 8007f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f26:	f01e 0f10 	tst.w	lr, #16
 8007f2a:	bf08      	it	eq
 8007f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f30:	f380 8809 	msr	PSP, r0
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	f3af 8000 	nop.w

08007f40 <pxCurrentTCBConst>:
 8007f40:	240047b0 	.word	0x240047b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f62:	f001 f885 	bl	8009070 <xTaskIncrementTick>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <xPortSysTickHandler+0x40>)
 8007f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	2300      	movs	r3, #0
 8007f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	f383 8811 	msr	BASEPRI, r3
}
 8007f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f90:	4b0b      	ldr	r3, [pc, #44]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <vPortSetupTimerInterrupt+0x38>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <vPortSetupTimerInterrupt+0x3c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a0a      	ldr	r2, [pc, #40]	; (8007fcc <vPortSetupTimerInterrupt+0x40>)
 8007fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa6:	099b      	lsrs	r3, r3, #6
 8007fa8:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <vPortSetupTimerInterrupt+0x44>)
 8007faa:	3b01      	subs	r3, #1
 8007fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fae:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <vPortSetupTimerInterrupt+0x34>)
 8007fb0:	2207      	movs	r2, #7
 8007fb2:	601a      	str	r2, [r3, #0]
}
 8007fb4:	bf00      	nop
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	e000e010 	.word	0xe000e010
 8007fc4:	e000e018 	.word	0xe000e018
 8007fc8:	24000000 	.word	0x24000000
 8007fcc:	10624dd3 	.word	0x10624dd3
 8007fd0:	e000e014 	.word	0xe000e014

08007fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007fe4 <vPortEnableVFP+0x10>
 8007fd8:	6801      	ldr	r1, [r0, #0]
 8007fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007fde:	6001      	str	r1, [r0, #0]
 8007fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fe2:	bf00      	nop
 8007fe4:	e000ed88 	.word	0xe000ed88

08007fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fee:	f3ef 8305 	mrs	r3, IPSR
 8007ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d914      	bls.n	8008024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ffa:	4a17      	ldr	r2, [pc, #92]	; (8008058 <vPortValidateInterruptPriority+0x70>)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008004:	4b15      	ldr	r3, [pc, #84]	; (800805c <vPortValidateInterruptPriority+0x74>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	7afa      	ldrb	r2, [r7, #11]
 800800a:	429a      	cmp	r2, r3
 800800c:	d20a      	bcs.n	8008024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
 8008022:	e7fe      	b.n	8008022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <vPortValidateInterruptPriority+0x78>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800802c:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <vPortValidateInterruptPriority+0x7c>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d90a      	bls.n	800804a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	603b      	str	r3, [r7, #0]
}
 8008046:	bf00      	nop
 8008048:	e7fe      	b.n	8008048 <vPortValidateInterruptPriority+0x60>
	}
 800804a:	bf00      	nop
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	e000e3f0 	.word	0xe000e3f0
 800805c:	24004768 	.word	0x24004768
 8008060:	e000ed0c 	.word	0xe000ed0c
 8008064:	2400476c 	.word	0x2400476c

08008068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xQueueGenericReset+0x2a>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60bb      	str	r3, [r7, #8]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008092:	f7ff fec7 	bl	8007e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	441a      	add	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	3b01      	subs	r3, #1
 80080c4:	68f9      	ldr	r1, [r7, #12]
 80080c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080c8:	fb01 f303 	mul.w	r3, r1, r3
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	22ff      	movs	r2, #255	; 0xff
 80080de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d114      	bne.n	8008112 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01a      	beq.n	8008126 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3310      	adds	r3, #16
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 f929 	bl	800934c <xTaskRemoveFromEventList>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d012      	beq.n	8008126 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <xQueueGenericReset+0xcc>)
 8008102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	e009      	b.n	8008126 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3310      	adds	r3, #16
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fca0 	bl	8007a5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3324      	adds	r3, #36	; 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fc9b 	bl	8007a5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008126:	f7ff fead 	bl	8007e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800812a:	2301      	movs	r3, #1
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08e      	sub	sp, #56	; 0x38
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10a      	bne.n	800817e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <xQueueGenericCreateStatic+0x52>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <xQueueGenericCreateStatic+0x56>
 800818a:	2301      	movs	r3, #1
 800818c:	e000      	b.n	8008190 <xQueueGenericCreateStatic+0x58>
 800818e:	2300      	movs	r3, #0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <xQueueGenericCreateStatic+0x7e>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <xQueueGenericCreateStatic+0x82>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <xQueueGenericCreateStatic+0x84>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	61fb      	str	r3, [r7, #28]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081d6:	2350      	movs	r3, #80	; 0x50
 80081d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b50      	cmp	r3, #80	; 0x50
 80081de:	d00a      	beq.n	80081f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	61bb      	str	r3, [r7, #24]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800820a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800820e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f805 	bl	8008228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008220:	4618      	mov	r0, r3
 8008222:	3730      	adds	r7, #48	; 0x30
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e002      	b.n	800824a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008256:	2101      	movs	r1, #1
 8008258:	69b8      	ldr	r0, [r7, #24]
 800825a:	f7ff ff05 	bl	8008068 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	78fa      	ldrb	r2, [r7, #3]
 8008262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
	...

08008270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08e      	sub	sp, #56	; 0x38
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800827e:	2300      	movs	r3, #0
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xQueueGenericSend+0x32>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <xQueueGenericSend+0x40>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <xQueueGenericSend+0x44>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <xQueueGenericSend+0x46>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10a      	bne.n	80082d0 <xQueueGenericSend+0x60>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d103      	bne.n	80082de <xQueueGenericSend+0x6e>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <xQueueGenericSend+0x72>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueGenericSend+0x74>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <xQueueGenericSend+0x8e>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	623b      	str	r3, [r7, #32]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082fe:	f001 f9e7 	bl	80096d0 <xTaskGetSchedulerState>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <xQueueGenericSend+0x9e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <xQueueGenericSend+0xa2>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <xQueueGenericSend+0xa4>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xQueueGenericSend+0xbe>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	61fb      	str	r3, [r7, #28]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800832e:	f7ff fd79 	bl	8007e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833a:	429a      	cmp	r2, r3
 800833c:	d302      	bcc.n	8008344 <xQueueGenericSend+0xd4>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d129      	bne.n	8008398 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800834a:	f000 fa0b 	bl	8008764 <prvCopyDataToQueue>
 800834e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d010      	beq.n	800837a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	3324      	adds	r3, #36	; 0x24
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fff5 	bl	800934c <xTaskRemoveFromEventList>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d013      	beq.n	8008390 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008368:	4b3f      	ldr	r3, [pc, #252]	; (8008468 <xQueueGenericSend+0x1f8>)
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	e00a      	b.n	8008390 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d007      	beq.n	8008390 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008380:	4b39      	ldr	r3, [pc, #228]	; (8008468 <xQueueGenericSend+0x1f8>)
 8008382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008390:	f7ff fd78 	bl	8007e84 <vPortExitCritical>
				return pdPASS;
 8008394:	2301      	movs	r3, #1
 8008396:	e063      	b.n	8008460 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800839e:	f7ff fd71 	bl	8007e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e05c      	b.n	8008460 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d106      	bne.n	80083ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f82f 	bl	8009414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b6:	2301      	movs	r3, #1
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ba:	f7ff fd63 	bl	8007e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083be:	f000 fd9b 	bl	8008ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c2:	f7ff fd2f 	bl	8007e24 <vPortEnterCritical>
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d2:	d103      	bne.n	80083dc <xQueueGenericSend+0x16c>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d103      	bne.n	80083f2 <xQueueGenericSend+0x182>
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f2:	f7ff fd47 	bl	8007e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083f6:	1d3a      	adds	r2, r7, #4
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	4611      	mov	r1, r2
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 f81e 	bl	8009440 <xTaskCheckForTimeOut>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d124      	bne.n	8008454 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800840a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800840c:	f000 faa2 	bl	8008954 <prvIsQueueFull>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008418:	3310      	adds	r3, #16
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4611      	mov	r1, r2
 800841e:	4618      	mov	r0, r3
 8008420:	f000 ff44 	bl	80092ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008426:	f000 fa2d 	bl	8008884 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800842a:	f000 fd73 	bl	8008f14 <xTaskResumeAll>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f af7c 	bne.w	800832e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <xQueueGenericSend+0x1f8>)
 8008438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	e772      	b.n	800832e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844a:	f000 fa1b 	bl	8008884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800844e:	f000 fd61 	bl	8008f14 <xTaskResumeAll>
 8008452:	e76c      	b.n	800832e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008456:	f000 fa15 	bl	8008884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800845a:	f000 fd5b 	bl	8008f14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800845e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008460:	4618      	mov	r0, r3
 8008462:	3738      	adds	r7, #56	; 0x38
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b090      	sub	sp, #64	; 0x40
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <xQueueGenericSendFromISR+0x3c>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <xQueueGenericSendFromISR+0x40>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <xQueueGenericSendFromISR+0x42>
 80084ac:	2300      	movs	r3, #0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10a      	bne.n	80084c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d103      	bne.n	80084d6 <xQueueGenericSendFromISR+0x6a>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <xQueueGenericSendFromISR+0x6e>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e000      	b.n	80084dc <xQueueGenericSendFromISR+0x70>
 80084da:	2300      	movs	r3, #0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10a      	bne.n	80084f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	623b      	str	r3, [r7, #32]
}
 80084f2:	bf00      	nop
 80084f4:	e7fe      	b.n	80084f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084f6:	f7ff fd77 	bl	8007fe8 <vPortValidateInterruptPriority>
	__asm volatile
 80084fa:	f3ef 8211 	mrs	r2, BASEPRI
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	61fa      	str	r2, [r7, #28]
 8008510:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008512:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	429a      	cmp	r2, r3
 8008520:	d302      	bcc.n	8008528 <xQueueGenericSendFromISR+0xbc>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d12f      	bne.n	8008588 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800852e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008536:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	68b9      	ldr	r1, [r7, #8]
 800853c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800853e:	f000 f911 	bl	8008764 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008542:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d112      	bne.n	8008572 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d016      	beq.n	8008582 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	3324      	adds	r3, #36	; 0x24
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fef7 	bl	800934c <xTaskRemoveFromEventList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	e007      	b.n	8008582 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008572:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008576:	3301      	adds	r3, #1
 8008578:	b2db      	uxtb	r3, r3
 800857a:	b25a      	sxtb	r2, r3
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008582:	2301      	movs	r3, #1
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008586:	e001      	b.n	800858c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008588:	2300      	movs	r3, #0
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f383 8811 	msr	BASEPRI, r3
}
 8008596:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800859a:	4618      	mov	r0, r3
 800859c:	3740      	adds	r7, #64	; 0x40
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08c      	sub	sp, #48	; 0x30
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10a      	bne.n	80085d4 <xQueueReceive+0x30>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	623b      	str	r3, [r7, #32]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <xQueueReceive+0x3e>
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <xQueueReceive+0x42>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <xQueueReceive+0x44>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xQueueReceive+0x5e>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	61fb      	str	r3, [r7, #28]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008602:	f001 f865 	bl	80096d0 <xTaskGetSchedulerState>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d102      	bne.n	8008612 <xQueueReceive+0x6e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x72>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueReceive+0x74>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueReceive+0x8e>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008632:	f7ff fbf7 	bl	8007e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01f      	beq.n	8008682 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008646:	f000 f8f7 	bl	8008838 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	1e5a      	subs	r2, r3, #1
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00f      	beq.n	800867a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865c:	3310      	adds	r3, #16
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fe74 	bl	800934c <xTaskRemoveFromEventList>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800866a:	4b3d      	ldr	r3, [pc, #244]	; (8008760 <xQueueReceive+0x1bc>)
 800866c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800867a:	f7ff fc03 	bl	8007e84 <vPortExitCritical>
				return pdPASS;
 800867e:	2301      	movs	r3, #1
 8008680:	e069      	b.n	8008756 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008688:	f7ff fbfc 	bl	8007e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800868c:	2300      	movs	r3, #0
 800868e:	e062      	b.n	8008756 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	2b00      	cmp	r3, #0
 8008694:	d106      	bne.n	80086a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	4618      	mov	r0, r3
 800869c:	f000 feba 	bl	8009414 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086a4:	f7ff fbee 	bl	8007e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a8:	f000 fc26 	bl	8008ef8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ac:	f7ff fbba 	bl	8007e24 <vPortEnterCritical>
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b6:	b25b      	sxtb	r3, r3
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d103      	bne.n	80086c6 <xQueueReceive+0x122>
 80086be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086cc:	b25b      	sxtb	r3, r3
 80086ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d2:	d103      	bne.n	80086dc <xQueueReceive+0x138>
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086dc:	f7ff fbd2 	bl	8007e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086e0:	1d3a      	adds	r2, r7, #4
 80086e2:	f107 0310 	add.w	r3, r7, #16
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fea9 	bl	8009440 <xTaskCheckForTimeOut>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d123      	bne.n	800873c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f6:	f000 f917 	bl	8008928 <prvIsQueueEmpty>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d017      	beq.n	8008730 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fdcf 	bl	80092ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800870e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008710:	f000 f8b8 	bl	8008884 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008714:	f000 fbfe 	bl	8008f14 <xTaskResumeAll>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d189      	bne.n	8008632 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800871e:	4b10      	ldr	r3, [pc, #64]	; (8008760 <xQueueReceive+0x1bc>)
 8008720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	e780      	b.n	8008632 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f000 f8a7 	bl	8008884 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008736:	f000 fbed 	bl	8008f14 <xTaskResumeAll>
 800873a:	e77a      	b.n	8008632 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800873c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873e:	f000 f8a1 	bl	8008884 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008742:	f000 fbe7 	bl	8008f14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008748:	f000 f8ee 	bl	8008928 <prvIsQueueEmpty>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	f43f af6f 	beq.w	8008632 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008754:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008756:	4618      	mov	r0, r3
 8008758:	3730      	adds	r7, #48	; 0x30
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	e000ed04 	.word	0xe000ed04

08008764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10d      	bne.n	800879e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d14d      	bne.n	8008826 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ffbc 	bl	800970c <xTaskPriorityDisinherit>
 8008794:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	e043      	b.n	8008826 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d119      	bne.n	80087d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6858      	ldr	r0, [r3, #4]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ac:	461a      	mov	r2, r3
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	f001 fbe2 	bl	8009f78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	441a      	add	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d32b      	bcc.n	8008826 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	e026      	b.n	8008826 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68d8      	ldr	r0, [r3, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	461a      	mov	r2, r3
 80087e2:	68b9      	ldr	r1, [r7, #8]
 80087e4:	f001 fbc8 	bl	8009f78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68da      	ldr	r2, [r3, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f0:	425b      	negs	r3, r3
 80087f2:	441a      	add	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d207      	bcs.n	8008814 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	425b      	negs	r3, r3
 800880e:	441a      	add	r2, r3
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b02      	cmp	r3, #2
 8008818:	d105      	bne.n	8008826 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	3b01      	subs	r3, #1
 8008824:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800882e:	697b      	ldr	r3, [r7, #20]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	d018      	beq.n	800887c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	441a      	add	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68da      	ldr	r2, [r3, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	429a      	cmp	r2, r3
 8008862:	d303      	bcc.n	800886c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	68d9      	ldr	r1, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	461a      	mov	r2, r3
 8008876:	6838      	ldr	r0, [r7, #0]
 8008878:	f001 fb7e 	bl	8009f78 <memcpy>
	}
}
 800887c:	bf00      	nop
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800888c:	f7ff faca 	bl	8007e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008896:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008898:	e011      	b.n	80088be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d012      	beq.n	80088c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	3324      	adds	r3, #36	; 0x24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 fd50 	bl	800934c <xTaskRemoveFromEventList>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088b2:	f000 fe27 	bl	8009504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dce9      	bgt.n	800889a <prvUnlockQueue+0x16>
 80088c6:	e000      	b.n	80088ca <prvUnlockQueue+0x46>
					break;
 80088c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	22ff      	movs	r2, #255	; 0xff
 80088ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088d2:	f7ff fad7 	bl	8007e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088d6:	f7ff faa5 	bl	8007e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088e2:	e011      	b.n	8008908 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d012      	beq.n	8008912 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3310      	adds	r3, #16
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fd2b 	bl	800934c <xTaskRemoveFromEventList>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d001      	beq.n	8008900 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088fc:	f000 fe02 	bl	8009504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	3b01      	subs	r3, #1
 8008904:	b2db      	uxtb	r3, r3
 8008906:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800890c:	2b00      	cmp	r3, #0
 800890e:	dce9      	bgt.n	80088e4 <prvUnlockQueue+0x60>
 8008910:	e000      	b.n	8008914 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008912:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	22ff      	movs	r2, #255	; 0xff
 8008918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800891c:	f7ff fab2 	bl	8007e84 <vPortExitCritical>
}
 8008920:	bf00      	nop
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008930:	f7ff fa78 	bl	8007e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	e001      	b.n	8008946 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008946:	f7ff fa9d 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 800894a:	68fb      	ldr	r3, [r7, #12]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800895c:	f7ff fa62 	bl	8007e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008968:	429a      	cmp	r2, r3
 800896a:	d102      	bne.n	8008972 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	e001      	b.n	8008976 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008976:	f7ff fa85 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 800897a:	68fb      	ldr	r3, [r7, #12]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	e014      	b.n	80089be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008994:	4a0f      	ldr	r2, [pc, #60]	; (80089d4 <vQueueAddToRegistry+0x50>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10b      	bne.n	80089b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089a0:	490c      	ldr	r1, [pc, #48]	; (80089d4 <vQueueAddToRegistry+0x50>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089aa:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <vQueueAddToRegistry+0x50>)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	4413      	add	r3, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089b6:	e006      	b.n	80089c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2b07      	cmp	r3, #7
 80089c2:	d9e7      	bls.n	8008994 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	24004770 	.word	0x24004770

080089d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089e8:	f7ff fa1c 	bl	8007e24 <vPortEnterCritical>
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <vQueueWaitForMessageRestricted+0x2a>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d103      	bne.n	8008a18 <vQueueWaitForMessageRestricted+0x40>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a18:	f7ff fa34 	bl	8007e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	3324      	adds	r3, #36	; 0x24
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	68b9      	ldr	r1, [r7, #8]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fc61 	bl	80092f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a32:	6978      	ldr	r0, [r7, #20]
 8008a34:	f7ff ff26 	bl	8008884 <prvUnlockQueue>
	}
 8008a38:	bf00      	nop
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08e      	sub	sp, #56	; 0x38
 8008a44:	af04      	add	r7, sp, #16
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	623b      	str	r3, [r7, #32]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	61fb      	str	r3, [r7, #28]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a86:	23bc      	movs	r3, #188	; 0xbc
 8008a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2bbc      	cmp	r3, #188	; 0xbc
 8008a8e:	d00a      	beq.n	8008aa6 <xTaskCreateStatic+0x66>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	61bb      	str	r3, [r7, #24]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d01e      	beq.n	8008aec <xTaskCreateStatic+0xac>
 8008aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01b      	beq.n	8008aec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	9303      	str	r3, [sp, #12]
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 f850 	bl	8008b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ae6:	f000 f8f3 	bl	8008cd0 <prvAddNewTaskToReadyList>
 8008aea:	e001      	b.n	8008af0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008af0:	697b      	ldr	r3, [r7, #20]
	}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3728      	adds	r7, #40	; 0x28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b08c      	sub	sp, #48	; 0x30
 8008afe:	af04      	add	r7, sp, #16
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4613      	mov	r3, r2
 8008b08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fdba 	bl	8007688 <pvPortMalloc>
 8008b14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b1c:	20bc      	movs	r0, #188	; 0xbc
 8008b1e:	f7fe fdb3 	bl	8007688 <pvPortMalloc>
 8008b22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	631a      	str	r2, [r3, #48]	; 0x30
 8008b30:	e005      	b.n	8008b3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b32:	6978      	ldr	r0, [r7, #20]
 8008b34:	f7fe fe74 	bl	8007820 <vPortFree>
 8008b38:	e001      	b.n	8008b3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d017      	beq.n	8008b74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b4c:	88fa      	ldrh	r2, [r7, #6]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9303      	str	r3, [sp, #12]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	9302      	str	r3, [sp, #8]
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f80e 	bl	8008b84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b68:	69f8      	ldr	r0, [r7, #28]
 8008b6a:	f000 f8b1 	bl	8008cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	e002      	b.n	8008b7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b74:	f04f 33ff 	mov.w	r3, #4294967295
 8008b78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	21a5      	movs	r1, #165	; 0xa5
 8008b9e:	f001 f9f9 	bl	8009f94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bac:	440b      	add	r3, r1
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	617b      	str	r3, [r7, #20]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d01f      	beq.n	8008c22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008be2:	2300      	movs	r3, #0
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	e012      	b.n	8008c0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	4413      	add	r3, r2
 8008bee:	7819      	ldrb	r1, [r3, #0]
 8008bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	3334      	adds	r3, #52	; 0x34
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d006      	beq.n	8008c16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	2b0f      	cmp	r3, #15
 8008c12:	d9e9      	bls.n	8008be8 <prvInitialiseNewTask+0x64>
 8008c14:	e000      	b.n	8008c18 <prvInitialiseNewTask+0x94>
			{
				break;
 8008c16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c20:	e003      	b.n	8008c2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	2b37      	cmp	r3, #55	; 0x37
 8008c2e:	d901      	bls.n	8008c34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c30:	2337      	movs	r3, #55	; 0x37
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	2200      	movs	r2, #0
 8008c44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	3304      	adds	r3, #4
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe ff26 	bl	8007a9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	3318      	adds	r3, #24
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fe ff21 	bl	8007a9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c82:	3354      	adds	r3, #84	; 0x54
 8008c84:	2260      	movs	r2, #96	; 0x60
 8008c86:	2100      	movs	r1, #0
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f001 f983 	bl	8009f94 <memset>
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	4a0c      	ldr	r2, [pc, #48]	; (8008cc4 <prvInitialiseNewTask+0x140>)
 8008c92:	659a      	str	r2, [r3, #88]	; 0x58
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	4a0c      	ldr	r2, [pc, #48]	; (8008cc8 <prvInitialiseNewTask+0x144>)
 8008c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	4a0b      	ldr	r2, [pc, #44]	; (8008ccc <prvInitialiseNewTask+0x148>)
 8008c9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	69b8      	ldr	r0, [r7, #24]
 8008ca6:	f7fe ff8d 	bl	8007bc4 <pxPortInitialiseStack>
 8008caa:	4602      	mov	r2, r0
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cbc:	bf00      	nop
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	080122b8 	.word	0x080122b8
 8008cc8:	080122d8 	.word	0x080122d8
 8008ccc:	08012298 	.word	0x08012298

08008cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cd8:	f7ff f8a4 	bl	8007e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cdc:	4b2d      	ldr	r3, [pc, #180]	; (8008d94 <prvAddNewTaskToReadyList+0xc4>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a2c      	ldr	r2, [pc, #176]	; (8008d94 <prvAddNewTaskToReadyList+0xc4>)
 8008ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ce6:	4b2c      	ldr	r3, [pc, #176]	; (8008d98 <prvAddNewTaskToReadyList+0xc8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cee:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <prvAddNewTaskToReadyList+0xc8>)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cf4:	4b27      	ldr	r3, [pc, #156]	; (8008d94 <prvAddNewTaskToReadyList+0xc4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d110      	bne.n	8008d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cfc:	f000 fc26 	bl	800954c <prvInitialiseTaskLists>
 8008d00:	e00d      	b.n	8008d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d02:	4b26      	ldr	r3, [pc, #152]	; (8008d9c <prvAddNewTaskToReadyList+0xcc>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d0a:	4b23      	ldr	r3, [pc, #140]	; (8008d98 <prvAddNewTaskToReadyList+0xc8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d802      	bhi.n	8008d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <prvAddNewTaskToReadyList+0xc8>)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d1e:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <prvAddNewTaskToReadyList+0xd0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3301      	adds	r3, #1
 8008d24:	4a1e      	ldr	r2, [pc, #120]	; (8008da0 <prvAddNewTaskToReadyList+0xd0>)
 8008d26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d28:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <prvAddNewTaskToReadyList+0xd0>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4b1b      	ldr	r3, [pc, #108]	; (8008da4 <prvAddNewTaskToReadyList+0xd4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d903      	bls.n	8008d44 <prvAddNewTaskToReadyList+0x74>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a18      	ldr	r2, [pc, #96]	; (8008da4 <prvAddNewTaskToReadyList+0xd4>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <prvAddNewTaskToReadyList+0xd8>)
 8008d52:	441a      	add	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fe feab 	bl	8007ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d60:	f7ff f890 	bl	8007e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d64:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <prvAddNewTaskToReadyList+0xcc>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00e      	beq.n	8008d8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d6c:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <prvAddNewTaskToReadyList+0xc8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d207      	bcs.n	8008d8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d7a:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <prvAddNewTaskToReadyList+0xdc>)
 8008d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	24004c84 	.word	0x24004c84
 8008d98:	240047b0 	.word	0x240047b0
 8008d9c:	24004c90 	.word	0x24004c90
 8008da0:	24004ca0 	.word	0x24004ca0
 8008da4:	24004c8c 	.word	0x24004c8c
 8008da8:	240047b4 	.word	0x240047b4
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d017      	beq.n	8008df2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <vTaskDelay+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <vTaskDelay+0x30>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60bb      	str	r3, [r7, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008de0:	f000 f88a 	bl	8008ef8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fcfe 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008dec:	f000 f892 	bl	8008f14 <xTaskResumeAll>
 8008df0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d107      	bne.n	8008e08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <vTaskDelay+0x64>)
 8008dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	24004cac 	.word	0x24004cac
 8008e14:	e000ed04 	.word	0xe000ed04

08008e18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	; 0x28
 8008e1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e26:	463a      	mov	r2, r7
 8008e28:	1d39      	adds	r1, r7, #4
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fe fbf6 	bl	8007620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	9202      	str	r2, [sp, #8]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	460a      	mov	r2, r1
 8008e46:	4924      	ldr	r1, [pc, #144]	; (8008ed8 <vTaskStartScheduler+0xc0>)
 8008e48:	4824      	ldr	r0, [pc, #144]	; (8008edc <vTaskStartScheduler+0xc4>)
 8008e4a:	f7ff fdf9 	bl	8008a40 <xTaskCreateStatic>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4a23      	ldr	r2, [pc, #140]	; (8008ee0 <vTaskStartScheduler+0xc8>)
 8008e52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e54:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <vTaskStartScheduler+0xc8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	e001      	b.n	8008e66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d102      	bne.n	8008e72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e6c:	f000 fd10 	bl	8009890 <xTimerCreateTimerTask>
 8008e70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d11b      	bne.n	8008eb0 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	613b      	str	r3, [r7, #16]
}
 8008e8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e8c:	4b15      	ldr	r3, [pc, #84]	; (8008ee4 <vTaskStartScheduler+0xcc>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3354      	adds	r3, #84	; 0x54
 8008e92:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <vTaskStartScheduler+0xd0>)
 8008e94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e96:	4b15      	ldr	r3, [pc, #84]	; (8008eec <vTaskStartScheduler+0xd4>)
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e9e:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <vTaskStartScheduler+0xd8>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ea4:	4b13      	ldr	r3, [pc, #76]	; (8008ef4 <vTaskStartScheduler+0xdc>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eaa:	f7fe ff19 	bl	8007ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eae:	e00e      	b.n	8008ece <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d10a      	bne.n	8008ece <vTaskStartScheduler+0xb6>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60fb      	str	r3, [r7, #12]
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <vTaskStartScheduler+0xb4>
}
 8008ece:	bf00      	nop
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	0800a164 	.word	0x0800a164
 8008edc:	0800951d 	.word	0x0800951d
 8008ee0:	24004ca8 	.word	0x24004ca8
 8008ee4:	240047b0 	.word	0x240047b0
 8008ee8:	24000024 	.word	0x24000024
 8008eec:	24004ca4 	.word	0x24004ca4
 8008ef0:	24004c90 	.word	0x24004c90
 8008ef4:	24004c88 	.word	0x24004c88

08008ef8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <vTaskSuspendAll+0x18>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3301      	adds	r3, #1
 8008f02:	4a03      	ldr	r2, [pc, #12]	; (8008f10 <vTaskSuspendAll+0x18>)
 8008f04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f06:	bf00      	nop
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	24004cac 	.word	0x24004cac

08008f14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f22:	4b42      	ldr	r3, [pc, #264]	; (800902c <xTaskResumeAll+0x118>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	603b      	str	r3, [r7, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f40:	f7fe ff70 	bl	8007e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f44:	4b39      	ldr	r3, [pc, #228]	; (800902c <xTaskResumeAll+0x118>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	4a38      	ldr	r2, [pc, #224]	; (800902c <xTaskResumeAll+0x118>)
 8008f4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f4e:	4b37      	ldr	r3, [pc, #220]	; (800902c <xTaskResumeAll+0x118>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d162      	bne.n	800901c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f56:	4b36      	ldr	r3, [pc, #216]	; (8009030 <xTaskResumeAll+0x11c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d05e      	beq.n	800901c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f5e:	e02f      	b.n	8008fc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	4b34      	ldr	r3, [pc, #208]	; (8009034 <xTaskResumeAll+0x120>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	3318      	adds	r3, #24
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fdff 	bl	8007b70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fe fdfa 	bl	8007b70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f80:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <xTaskResumeAll+0x124>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <xTaskResumeAll+0x7c>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	; (8009038 <xTaskResumeAll+0x124>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4a27      	ldr	r2, [pc, #156]	; (800903c <xTaskResumeAll+0x128>)
 8008f9e:	441a      	add	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe fd85 	bl	8007ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb0:	4b23      	ldr	r3, [pc, #140]	; (8009040 <xTaskResumeAll+0x12c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fba:	4b22      	ldr	r3, [pc, #136]	; (8009044 <xTaskResumeAll+0x130>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc0:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xTaskResumeAll+0x120>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1cb      	bne.n	8008f60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fce:	f000 fb5f 	bl	8009690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fd2:	4b1d      	ldr	r3, [pc, #116]	; (8009048 <xTaskResumeAll+0x134>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d010      	beq.n	8009000 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fde:	f000 f847 	bl	8009070 <xTaskIncrementTick>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fe8:	4b16      	ldr	r3, [pc, #88]	; (8009044 <xTaskResumeAll+0x130>)
 8008fea:	2201      	movs	r2, #1
 8008fec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f1      	bne.n	8008fde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <xTaskResumeAll+0x134>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <xTaskResumeAll+0x130>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d009      	beq.n	800901c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800900c:	4b0f      	ldr	r3, [pc, #60]	; (800904c <xTaskResumeAll+0x138>)
 800900e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f7fe ff32 	bl	8007e84 <vPortExitCritical>

	return xAlreadyYielded;
 8009020:	68bb      	ldr	r3, [r7, #8]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	24004cac 	.word	0x24004cac
 8009030:	24004c84 	.word	0x24004c84
 8009034:	24004c44 	.word	0x24004c44
 8009038:	24004c8c 	.word	0x24004c8c
 800903c:	240047b4 	.word	0x240047b4
 8009040:	240047b0 	.word	0x240047b0
 8009044:	24004c98 	.word	0x24004c98
 8009048:	24004c94 	.word	0x24004c94
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <xTaskGetTickCount+0x1c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800905c:	687b      	ldr	r3, [r7, #4]
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	24004c88 	.word	0x24004c88

08009070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800907a:	4b4f      	ldr	r3, [pc, #316]	; (80091b8 <xTaskIncrementTick+0x148>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 808f 	bne.w	80091a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009084:	4b4d      	ldr	r3, [pc, #308]	; (80091bc <xTaskIncrementTick+0x14c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3301      	adds	r3, #1
 800908a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800908c:	4a4b      	ldr	r2, [pc, #300]	; (80091bc <xTaskIncrementTick+0x14c>)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d120      	bne.n	80090da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009098:	4b49      	ldr	r3, [pc, #292]	; (80091c0 <xTaskIncrementTick+0x150>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	603b      	str	r3, [r7, #0]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <xTaskIncrementTick+0x46>
 80090b8:	4b41      	ldr	r3, [pc, #260]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
 80090be:	4b41      	ldr	r3, [pc, #260]	; (80091c4 <xTaskIncrementTick+0x154>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3f      	ldr	r2, [pc, #252]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	4a3f      	ldr	r2, [pc, #252]	; (80091c4 <xTaskIncrementTick+0x154>)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	4b3e      	ldr	r3, [pc, #248]	; (80091c8 <xTaskIncrementTick+0x158>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3301      	adds	r3, #1
 80090d2:	4a3d      	ldr	r2, [pc, #244]	; (80091c8 <xTaskIncrementTick+0x158>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	f000 fadb 	bl	8009690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090da:	4b3c      	ldr	r3, [pc, #240]	; (80091cc <xTaskIncrementTick+0x15c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d349      	bcc.n	8009178 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e4:	4b36      	ldr	r3, [pc, #216]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d104      	bne.n	80090f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090ee:	4b37      	ldr	r3, [pc, #220]	; (80091cc <xTaskIncrementTick+0x15c>)
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	601a      	str	r2, [r3, #0]
					break;
 80090f6:	e03f      	b.n	8009178 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f8:	4b31      	ldr	r3, [pc, #196]	; (80091c0 <xTaskIncrementTick+0x150>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d203      	bcs.n	8009118 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009110:	4a2e      	ldr	r2, [pc, #184]	; (80091cc <xTaskIncrementTick+0x15c>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009116:	e02f      	b.n	8009178 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	3304      	adds	r3, #4
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fd27 	bl	8007b70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3318      	adds	r3, #24
 800912e:	4618      	mov	r0, r3
 8009130:	f7fe fd1e 	bl	8007b70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <xTaskIncrementTick+0x160>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d903      	bls.n	8009148 <xTaskIncrementTick+0xd8>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4a22      	ldr	r2, [pc, #136]	; (80091d0 <xTaskIncrementTick+0x160>)
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4613      	mov	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4413      	add	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <xTaskIncrementTick+0x164>)
 8009156:	441a      	add	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fe fca9 	bl	8007ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <xTaskIncrementTick+0x168>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	429a      	cmp	r2, r3
 8009170:	d3b8      	bcc.n	80090e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009176:	e7b5      	b.n	80090e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009178:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <xTaskIncrementTick+0x168>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917e:	4915      	ldr	r1, [pc, #84]	; (80091d4 <xTaskIncrementTick+0x164>)
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d901      	bls.n	8009194 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <xTaskIncrementTick+0x16c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800919c:	2301      	movs	r3, #1
 800919e:	617b      	str	r3, [r7, #20]
 80091a0:	e004      	b.n	80091ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091a2:	4b0f      	ldr	r3, [pc, #60]	; (80091e0 <xTaskIncrementTick+0x170>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3301      	adds	r3, #1
 80091a8:	4a0d      	ldr	r2, [pc, #52]	; (80091e0 <xTaskIncrementTick+0x170>)
 80091aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091ac:	697b      	ldr	r3, [r7, #20]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	24004cac 	.word	0x24004cac
 80091bc:	24004c88 	.word	0x24004c88
 80091c0:	24004c3c 	.word	0x24004c3c
 80091c4:	24004c40 	.word	0x24004c40
 80091c8:	24004c9c 	.word	0x24004c9c
 80091cc:	24004ca4 	.word	0x24004ca4
 80091d0:	24004c8c 	.word	0x24004c8c
 80091d4:	240047b4 	.word	0x240047b4
 80091d8:	240047b0 	.word	0x240047b0
 80091dc:	24004c98 	.word	0x24004c98
 80091e0:	24004c94 	.word	0x24004c94

080091e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091ea:	4b2a      	ldr	r3, [pc, #168]	; (8009294 <vTaskSwitchContext+0xb0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091f2:	4b29      	ldr	r3, [pc, #164]	; (8009298 <vTaskSwitchContext+0xb4>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091f8:	e046      	b.n	8009288 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80091fa:	4b27      	ldr	r3, [pc, #156]	; (8009298 <vTaskSwitchContext+0xb4>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009200:	4b26      	ldr	r3, [pc, #152]	; (800929c <vTaskSwitchContext+0xb8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	e010      	b.n	800922a <vTaskSwitchContext+0x46>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <vTaskSwitchContext+0x40>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	607b      	str	r3, [r7, #4]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <vTaskSwitchContext+0x3e>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3b01      	subs	r3, #1
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	491d      	ldr	r1, [pc, #116]	; (80092a0 <vTaskSwitchContext+0xbc>)
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0e4      	beq.n	8009208 <vTaskSwitchContext+0x24>
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <vTaskSwitchContext+0xbc>)
 800924a:	4413      	add	r3, r2
 800924c:	60bb      	str	r3, [r7, #8]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	685a      	ldr	r2, [r3, #4]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	605a      	str	r2, [r3, #4]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	3308      	adds	r3, #8
 8009260:	429a      	cmp	r2, r3
 8009262:	d104      	bne.n	800926e <vTaskSwitchContext+0x8a>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	605a      	str	r2, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4a0b      	ldr	r2, [pc, #44]	; (80092a4 <vTaskSwitchContext+0xc0>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	4a08      	ldr	r2, [pc, #32]	; (800929c <vTaskSwitchContext+0xb8>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <vTaskSwitchContext+0xc0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3354      	adds	r3, #84	; 0x54
 8009284:	4a08      	ldr	r2, [pc, #32]	; (80092a8 <vTaskSwitchContext+0xc4>)
 8009286:	6013      	str	r3, [r2, #0]
}
 8009288:	bf00      	nop
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	24004cac 	.word	0x24004cac
 8009298:	24004c98 	.word	0x24004c98
 800929c:	24004c8c 	.word	0x24004c8c
 80092a0:	240047b4 	.word	0x240047b4
 80092a4:	240047b0 	.word	0x240047b0
 80092a8:	24000024 	.word	0x24000024

080092ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	60fb      	str	r3, [r7, #12]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092d2:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <vTaskPlaceOnEventList+0x44>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3318      	adds	r3, #24
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7fe fc0f 	bl	8007afe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092e0:	2101      	movs	r1, #1
 80092e2:	6838      	ldr	r0, [r7, #0]
 80092e4:	f000 fa80 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	240047b0 	.word	0x240047b0

080092f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	617b      	str	r3, [r7, #20]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <vTaskPlaceOnEventListRestricted+0x54>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3318      	adds	r3, #24
 8009322:	4619      	mov	r1, r3
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f7fe fbc6 	bl	8007ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009330:	f04f 33ff 	mov.w	r3, #4294967295
 8009334:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009336:	6879      	ldr	r1, [r7, #4]
 8009338:	68b8      	ldr	r0, [r7, #8]
 800933a:	f000 fa55 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
	}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	240047b0 	.word	0x240047b0

0800934c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10a      	bne.n	8009378 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	e7fe      	b.n	8009376 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3318      	adds	r3, #24
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe fbf7 	bl	8007b70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009382:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <xTaskRemoveFromEventList+0xb0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11d      	bne.n	80093c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	3304      	adds	r3, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fbee 	bl	8007b70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <xTaskRemoveFromEventList+0xb4>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d903      	bls.n	80093a8 <xTaskRemoveFromEventList+0x5c>
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <xTaskRemoveFromEventList+0xb4>)
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a13      	ldr	r2, [pc, #76]	; (8009404 <xTaskRemoveFromEventList+0xb8>)
 80093b6:	441a      	add	r2, r3
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f7fe fb79 	bl	8007ab6 <vListInsertEnd>
 80093c4:	e005      	b.n	80093d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3318      	adds	r3, #24
 80093ca:	4619      	mov	r1, r3
 80093cc:	480e      	ldr	r0, [pc, #56]	; (8009408 <xTaskRemoveFromEventList+0xbc>)
 80093ce:	f7fe fb72 	bl	8007ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d6:	4b0d      	ldr	r3, [pc, #52]	; (800940c <xTaskRemoveFromEventList+0xc0>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d905      	bls.n	80093ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093e0:	2301      	movs	r3, #1
 80093e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <xTaskRemoveFromEventList+0xc4>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e001      	b.n	80093f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093f0:	697b      	ldr	r3, [r7, #20]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	24004cac 	.word	0x24004cac
 8009400:	24004c8c 	.word	0x24004c8c
 8009404:	240047b4 	.word	0x240047b4
 8009408:	24004c44 	.word	0x24004c44
 800940c:	240047b0 	.word	0x240047b0
 8009410:	24004c98 	.word	0x24004c98

08009414 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800941c:	4b06      	ldr	r3, [pc, #24]	; (8009438 <vTaskInternalSetTimeOutState+0x24>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <vTaskInternalSetTimeOutState+0x28>)
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	605a      	str	r2, [r3, #4]
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	24004c9c 	.word	0x24004c9c
 800943c:	24004c88 	.word	0x24004c88

08009440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	613b      	str	r3, [r7, #16]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60fb      	str	r3, [r7, #12]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009482:	f7fe fccf 	bl	8007e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009486:	4b1d      	ldr	r3, [pc, #116]	; (80094fc <xTaskCheckForTimeOut+0xbc>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d102      	bne.n	80094a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	e023      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	4b15      	ldr	r3, [pc, #84]	; (8009500 <xTaskCheckForTimeOut+0xc0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d007      	beq.n	80094c2 <xTaskCheckForTimeOut+0x82>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	69ba      	ldr	r2, [r7, #24]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d302      	bcc.n	80094c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	e015      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d20b      	bcs.n	80094e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	1ad2      	subs	r2, r2, r3
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff ff9b 	bl	8009414 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094de:	2300      	movs	r3, #0
 80094e0:	61fb      	str	r3, [r7, #28]
 80094e2:	e004      	b.n	80094ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094ee:	f7fe fcc9 	bl	8007e84 <vPortExitCritical>

	return xReturn;
 80094f2:	69fb      	ldr	r3, [r7, #28]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	24004c88 	.word	0x24004c88
 8009500:	24004c9c 	.word	0x24004c9c

08009504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009508:	4b03      	ldr	r3, [pc, #12]	; (8009518 <vTaskMissedYield+0x14>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	24004c98 	.word	0x24004c98

0800951c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009524:	f000 f852 	bl	80095cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009528:	4b06      	ldr	r3, [pc, #24]	; (8009544 <prvIdleTask+0x28>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d9f9      	bls.n	8009524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <prvIdleTask+0x2c>)
 8009532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	f3bf 8f4f 	dsb	sy
 800953c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009540:	e7f0      	b.n	8009524 <prvIdleTask+0x8>
 8009542:	bf00      	nop
 8009544:	240047b4 	.word	0x240047b4
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009552:	2300      	movs	r3, #0
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	e00c      	b.n	8009572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4a12      	ldr	r2, [pc, #72]	; (80095ac <prvInitialiseTaskLists+0x60>)
 8009564:	4413      	add	r3, r2
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fa78 	bl	8007a5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	607b      	str	r3, [r7, #4]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b37      	cmp	r3, #55	; 0x37
 8009576:	d9ef      	bls.n	8009558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009578:	480d      	ldr	r0, [pc, #52]	; (80095b0 <prvInitialiseTaskLists+0x64>)
 800957a:	f7fe fa6f 	bl	8007a5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800957e:	480d      	ldr	r0, [pc, #52]	; (80095b4 <prvInitialiseTaskLists+0x68>)
 8009580:	f7fe fa6c 	bl	8007a5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009584:	480c      	ldr	r0, [pc, #48]	; (80095b8 <prvInitialiseTaskLists+0x6c>)
 8009586:	f7fe fa69 	bl	8007a5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800958a:	480c      	ldr	r0, [pc, #48]	; (80095bc <prvInitialiseTaskLists+0x70>)
 800958c:	f7fe fa66 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009590:	480b      	ldr	r0, [pc, #44]	; (80095c0 <prvInitialiseTaskLists+0x74>)
 8009592:	f7fe fa63 	bl	8007a5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009596:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <prvInitialiseTaskLists+0x78>)
 8009598:	4a05      	ldr	r2, [pc, #20]	; (80095b0 <prvInitialiseTaskLists+0x64>)
 800959a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800959c:	4b0a      	ldr	r3, [pc, #40]	; (80095c8 <prvInitialiseTaskLists+0x7c>)
 800959e:	4a05      	ldr	r2, [pc, #20]	; (80095b4 <prvInitialiseTaskLists+0x68>)
 80095a0:	601a      	str	r2, [r3, #0]
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	240047b4 	.word	0x240047b4
 80095b0:	24004c14 	.word	0x24004c14
 80095b4:	24004c28 	.word	0x24004c28
 80095b8:	24004c44 	.word	0x24004c44
 80095bc:	24004c58 	.word	0x24004c58
 80095c0:	24004c70 	.word	0x24004c70
 80095c4:	24004c3c 	.word	0x24004c3c
 80095c8:	24004c40 	.word	0x24004c40

080095cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095d2:	e019      	b.n	8009608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095d4:	f7fe fc26 	bl	8007e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	4b10      	ldr	r3, [pc, #64]	; (800961c <prvCheckTasksWaitingTermination+0x50>)
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fac3 	bl	8007b70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	4a0b      	ldr	r2, [pc, #44]	; (8009620 <prvCheckTasksWaitingTermination+0x54>)
 80095f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 80095fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095fe:	f7fe fc41 	bl	8007e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f810 	bl	8009628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <prvCheckTasksWaitingTermination+0x58>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e1      	bne.n	80095d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	24004c58 	.word	0x24004c58
 8009620:	24004c84 	.word	0x24004c84
 8009624:	24004c6c 	.word	0x24004c6c

08009628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3354      	adds	r3, #84	; 0x54
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fd0f 	bl	800a058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009640:	2b00      	cmp	r3, #0
 8009642:	d108      	bne.n	8009656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	4618      	mov	r0, r3
 800964a:	f7fe f8e9 	bl	8007820 <vPortFree>
				vPortFree( pxTCB );
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fe f8e6 	bl	8007820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009654:	e018      	b.n	8009688 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800965c:	2b01      	cmp	r3, #1
 800965e:	d103      	bne.n	8009668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7fe f8dd 	bl	8007820 <vPortFree>
	}
 8009666:	e00f      	b.n	8009688 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800966e:	2b02      	cmp	r3, #2
 8009670:	d00a      	beq.n	8009688 <prvDeleteTCB+0x60>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	60fb      	str	r3, [r7, #12]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <prvDeleteTCB+0x5e>
	}
 8009688:	bf00      	nop
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009696:	4b0c      	ldr	r3, [pc, #48]	; (80096c8 <prvResetNextTaskUnblockTime+0x38>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096a0:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <prvResetNextTaskUnblockTime+0x3c>)
 80096a2:	f04f 32ff 	mov.w	r2, #4294967295
 80096a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096a8:	e008      	b.n	80096bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <prvResetNextTaskUnblockTime+0x38>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	4a04      	ldr	r2, [pc, #16]	; (80096cc <prvResetNextTaskUnblockTime+0x3c>)
 80096ba:	6013      	str	r3, [r2, #0]
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	24004c3c 	.word	0x24004c3c
 80096cc:	24004ca4 	.word	0x24004ca4

080096d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <xTaskGetSchedulerState+0x34>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096de:	2301      	movs	r3, #1
 80096e0:	607b      	str	r3, [r7, #4]
 80096e2:	e008      	b.n	80096f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e4:	4b08      	ldr	r3, [pc, #32]	; (8009708 <xTaskGetSchedulerState+0x38>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096ec:	2302      	movs	r3, #2
 80096ee:	607b      	str	r3, [r7, #4]
 80096f0:	e001      	b.n	80096f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096f6:	687b      	ldr	r3, [r7, #4]
	}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	24004c90 	.word	0x24004c90
 8009708:	24004cac 	.word	0x24004cac

0800970c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d056      	beq.n	80097d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009722:	4b2e      	ldr	r3, [pc, #184]	; (80097dc <xTaskPriorityDisinherit+0xd0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d00a      	beq.n	8009742 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60fb      	str	r3, [r7, #12]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	60bb      	str	r3, [r7, #8]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009764:	1e5a      	subs	r2, r3, #1
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009772:	429a      	cmp	r2, r3
 8009774:	d02c      	beq.n	80097d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977a:	2b00      	cmp	r3, #0
 800977c:	d128      	bne.n	80097d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe f9f4 	bl	8007b70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <xTaskPriorityDisinherit+0xd4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d903      	bls.n	80097b0 <xTaskPriorityDisinherit+0xa4>
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <xTaskPriorityDisinherit+0xd4>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <xTaskPriorityDisinherit+0xd8>)
 80097be:	441a      	add	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe f975 	bl	8007ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097d0:	697b      	ldr	r3, [r7, #20]
	}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	240047b0 	.word	0x240047b0
 80097e0:	24004c8c 	.word	0x24004c8c
 80097e4:	240047b4 	.word	0x240047b4

080097e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097f2:	4b21      	ldr	r3, [pc, #132]	; (8009878 <prvAddCurrentTaskToDelayedList+0x90>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f8:	4b20      	ldr	r3, [pc, #128]	; (800987c <prvAddCurrentTaskToDelayedList+0x94>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe f9b6 	bl	8007b70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d10a      	bne.n	8009822 <prvAddCurrentTaskToDelayedList+0x3a>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d007      	beq.n	8009822 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009812:	4b1a      	ldr	r3, [pc, #104]	; (800987c <prvAddCurrentTaskToDelayedList+0x94>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3304      	adds	r3, #4
 8009818:	4619      	mov	r1, r3
 800981a:	4819      	ldr	r0, [pc, #100]	; (8009880 <prvAddCurrentTaskToDelayedList+0x98>)
 800981c:	f7fe f94b 	bl	8007ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009820:	e026      	b.n	8009870 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4413      	add	r3, r2
 8009828:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800982a:	4b14      	ldr	r3, [pc, #80]	; (800987c <prvAddCurrentTaskToDelayedList+0x94>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	429a      	cmp	r2, r3
 8009838:	d209      	bcs.n	800984e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800983a:	4b12      	ldr	r3, [pc, #72]	; (8009884 <prvAddCurrentTaskToDelayedList+0x9c>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b0f      	ldr	r3, [pc, #60]	; (800987c <prvAddCurrentTaskToDelayedList+0x94>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fe f959 	bl	8007afe <vListInsert>
}
 800984c:	e010      	b.n	8009870 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800984e:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b0a      	ldr	r3, [pc, #40]	; (800987c <prvAddCurrentTaskToDelayedList+0x94>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fe f94f 	bl	8007afe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009860:	4b0a      	ldr	r3, [pc, #40]	; (800988c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	429a      	cmp	r2, r3
 8009868:	d202      	bcs.n	8009870 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800986a:	4a08      	ldr	r2, [pc, #32]	; (800988c <prvAddCurrentTaskToDelayedList+0xa4>)
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	6013      	str	r3, [r2, #0]
}
 8009870:	bf00      	nop
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	24004c88 	.word	0x24004c88
 800987c:	240047b0 	.word	0x240047b0
 8009880:	24004c70 	.word	0x24004c70
 8009884:	24004c40 	.word	0x24004c40
 8009888:	24004c3c 	.word	0x24004c3c
 800988c:	24004ca4 	.word	0x24004ca4

08009890 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08a      	sub	sp, #40	; 0x28
 8009894:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800989a:	f000 fb07 	bl	8009eac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800989e:	4b1c      	ldr	r3, [pc, #112]	; (8009910 <xTimerCreateTimerTask+0x80>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d021      	beq.n	80098ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098ae:	1d3a      	adds	r2, r7, #4
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	f107 030c 	add.w	r3, r7, #12
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fd fecb 	bl	8007654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	9202      	str	r2, [sp, #8]
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	2302      	movs	r3, #2
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	2300      	movs	r3, #0
 80098ce:	460a      	mov	r2, r1
 80098d0:	4910      	ldr	r1, [pc, #64]	; (8009914 <xTimerCreateTimerTask+0x84>)
 80098d2:	4811      	ldr	r0, [pc, #68]	; (8009918 <xTimerCreateTimerTask+0x88>)
 80098d4:	f7ff f8b4 	bl	8008a40 <xTaskCreateStatic>
 80098d8:	4603      	mov	r3, r0
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <xTimerCreateTimerTask+0x8c>)
 80098dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098de:	4b0f      	ldr	r3, [pc, #60]	; (800991c <xTimerCreateTimerTask+0x8c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098e6:	2301      	movs	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009906:	697b      	ldr	r3, [r7, #20]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	24004ce0 	.word	0x24004ce0
 8009914:	0800a16c 	.word	0x0800a16c
 8009918:	08009a55 	.word	0x08009a55
 800991c:	24004ce4 	.word	0x24004ce4

08009920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800992e:	2300      	movs	r3, #0
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	623b      	str	r3, [r7, #32]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800994e:	4b1a      	ldr	r3, [pc, #104]	; (80099b8 <xTimerGenericCommand+0x98>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d02a      	beq.n	80099ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b05      	cmp	r3, #5
 8009966:	dc18      	bgt.n	800999a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009968:	f7ff feb2 	bl	80096d0 <xTaskGetSchedulerState>
 800996c:	4603      	mov	r3, r0
 800996e:	2b02      	cmp	r3, #2
 8009970:	d109      	bne.n	8009986 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009972:	4b11      	ldr	r3, [pc, #68]	; (80099b8 <xTimerGenericCommand+0x98>)
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f107 0110 	add.w	r1, r7, #16
 800997a:	2300      	movs	r3, #0
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	f7fe fc77 	bl	8008270 <xQueueGenericSend>
 8009982:	6278      	str	r0, [r7, #36]	; 0x24
 8009984:	e012      	b.n	80099ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009986:	4b0c      	ldr	r3, [pc, #48]	; (80099b8 <xTimerGenericCommand+0x98>)
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f107 0110 	add.w	r1, r7, #16
 800998e:	2300      	movs	r3, #0
 8009990:	2200      	movs	r2, #0
 8009992:	f7fe fc6d 	bl	8008270 <xQueueGenericSend>
 8009996:	6278      	str	r0, [r7, #36]	; 0x24
 8009998:	e008      	b.n	80099ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <xTimerGenericCommand+0x98>)
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f107 0110 	add.w	r1, r7, #16
 80099a2:	2300      	movs	r3, #0
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	f7fe fd61 	bl	800846c <xQueueGenericSendFromISR>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3728      	adds	r7, #40	; 0x28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	24004ce0 	.word	0x24004ce0

080099bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af02      	add	r7, sp, #8
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c6:	4b22      	ldr	r3, [pc, #136]	; (8009a50 <prvProcessExpiredTimer+0x94>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	3304      	adds	r3, #4
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe f8cb 	bl	8007b70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d022      	beq.n	8009a2e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	18d1      	adds	r1, r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	6978      	ldr	r0, [r7, #20]
 80099f6:	f000 f8d1 	bl	8009b9c <prvInsertTimerInActiveList>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01f      	beq.n	8009a40 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a00:	2300      	movs	r3, #0
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	2300      	movs	r3, #0
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6978      	ldr	r0, [r7, #20]
 8009a0c:	f7ff ff88 	bl	8009920 <xTimerGenericCommand>
 8009a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d113      	bne.n	8009a40 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	60fb      	str	r3, [r7, #12]
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a34:	f023 0301 	bic.w	r3, r3, #1
 8009a38:	b2da      	uxtb	r2, r3
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	6978      	ldr	r0, [r7, #20]
 8009a46:	4798      	blx	r3
}
 8009a48:	bf00      	nop
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	24004cd8 	.word	0x24004cd8

08009a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a5c:	f107 0308 	add.w	r3, r7, #8
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f857 	bl	8009b14 <prvGetNextExpireTime>
 8009a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f000 f803 	bl	8009a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a72:	f000 f8d5 	bl	8009c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a76:	e7f1      	b.n	8009a5c <prvTimerTask+0x8>

08009a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a82:	f7ff fa39 	bl	8008ef8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a86:	f107 0308 	add.w	r3, r7, #8
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f000 f866 	bl	8009b5c <prvSampleTimeNow>
 8009a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d130      	bne.n	8009afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d10a      	bne.n	8009ab4 <prvProcessTimerOrBlockTask+0x3c>
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d806      	bhi.n	8009ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009aa6:	f7ff fa35 	bl	8008f14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff ff85 	bl	80099bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ab2:	e024      	b.n	8009afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d008      	beq.n	8009acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aba:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <prvProcessTimerOrBlockTask+0x90>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <prvProcessTimerOrBlockTask+0x50>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e000      	b.n	8009aca <prvProcessTimerOrBlockTask+0x52>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009acc:	4b0f      	ldr	r3, [pc, #60]	; (8009b0c <prvProcessTimerOrBlockTask+0x94>)
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	f7fe ff7d 	bl	80089d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ade:	f7ff fa19 	bl	8008f14 <xTaskResumeAll>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ae8:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <prvProcessTimerOrBlockTask+0x98>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
}
 8009af8:	e001      	b.n	8009afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009afa:	f7ff fa0b 	bl	8008f14 <xTaskResumeAll>
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	24004cdc 	.word	0x24004cdc
 8009b0c:	24004ce0 	.word	0x24004ce0
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b1c:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <prvGetNextExpireTime+0x44>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <prvGetNextExpireTime+0x16>
 8009b26:	2201      	movs	r2, #1
 8009b28:	e000      	b.n	8009b2c <prvGetNextExpireTime+0x18>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d105      	bne.n	8009b44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <prvGetNextExpireTime+0x44>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	e001      	b.n	8009b48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b48:	68fb      	ldr	r3, [r7, #12]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	24004cd8 	.word	0x24004cd8

08009b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b64:	f7ff fa74 	bl	8009050 <xTaskGetTickCount>
 8009b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b6a:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <prvSampleTimeNow+0x3c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d205      	bcs.n	8009b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b74:	f000 f936 	bl	8009de4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b86:	4a04      	ldr	r2, [pc, #16]	; (8009b98 <prvSampleTimeNow+0x3c>)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	24004ce8 	.word	0x24004ce8

08009b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d812      	bhi.n	8009be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	1ad2      	subs	r2, r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d302      	bcc.n	8009bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	617b      	str	r3, [r7, #20]
 8009bd4:	e01b      	b.n	8009c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bd6:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <prvInsertTimerInActiveList+0x7c>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fd ff8c 	bl	8007afe <vListInsert>
 8009be6:	e012      	b.n	8009c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d206      	bcs.n	8009bfe <prvInsertTimerInActiveList+0x62>
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d302      	bcc.n	8009bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	e007      	b.n	8009c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bfe:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <prvInsertTimerInActiveList+0x80>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fd ff78 	bl	8007afe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c0e:	697b      	ldr	r3, [r7, #20]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	24004cdc 	.word	0x24004cdc
 8009c1c:	24004cd8 	.word	0x24004cd8

08009c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08e      	sub	sp, #56	; 0x38
 8009c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c26:	e0ca      	b.n	8009dbe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	da18      	bge.n	8009c60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c2e:	1d3b      	adds	r3, r7, #4
 8009c30:	3304      	adds	r3, #4
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d10a      	bne.n	8009c50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	61fb      	str	r3, [r7, #28]
}
 8009c4c:	bf00      	nop
 8009c4e:	e7fe      	b.n	8009c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c56:	6850      	ldr	r0, [r2, #4]
 8009c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c5a:	6892      	ldr	r2, [r2, #8]
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f2c0 80aa 	blt.w	8009dbc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	3304      	adds	r3, #4
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fd ff79 	bl	8007b70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c7e:	463b      	mov	r3, r7
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff ff6b 	bl	8009b5c <prvSampleTimeNow>
 8009c86:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	f200 8097 	bhi.w	8009dbe <prvProcessReceivedCommands+0x19e>
 8009c90:	a201      	add	r2, pc, #4	; (adr r2, 8009c98 <prvProcessReceivedCommands+0x78>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009cc1 	.word	0x08009cc1
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cc1 	.word	0x08009cc1
 8009ca4:	08009d35 	.word	0x08009d35
 8009ca8:	08009d49 	.word	0x08009d49
 8009cac:	08009d93 	.word	0x08009d93
 8009cb0:	08009cc1 	.word	0x08009cc1
 8009cb4:	08009cc1 	.word	0x08009cc1
 8009cb8:	08009d35 	.word	0x08009d35
 8009cbc:	08009d49 	.word	0x08009d49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cc6:	f043 0301 	orr.w	r3, r3, #1
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	18d1      	adds	r1, r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce0:	f7ff ff5c 	bl	8009b9c <prvInsertTimerInActiveList>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d069      	beq.n	8009dbe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cf8:	f003 0304 	and.w	r3, r3, #4
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d05e      	beq.n	8009dbe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	441a      	add	r2, r3
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	2100      	movs	r1, #0
 8009d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d12:	f7ff fe05 	bl	8009920 <xTimerGenericCommand>
 8009d16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d14f      	bne.n	8009dbe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	61bb      	str	r3, [r7, #24]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d3a:	f023 0301 	bic.w	r3, r3, #1
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d46:	e03a      	b.n	8009dbe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	617b      	str	r3, [r7, #20]
}
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	18d1      	adds	r1, r2, r3
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d8c:	f7ff ff06 	bl	8009b9c <prvInsertTimerInActiveList>
					break;
 8009d90:	e015      	b.n	8009dbe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009da2:	f7fd fd3d 	bl	8007820 <vPortFree>
 8009da6:	e00a      	b.n	8009dbe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dae:	f023 0301 	bic.w	r3, r3, #1
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dba:	e000      	b.n	8009dbe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <prvProcessReceivedCommands+0x1c0>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	1d39      	adds	r1, r7, #4
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fe fbec 	bl	80085a4 <xQueueReceive>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f47f af2a 	bne.w	8009c28 <prvProcessReceivedCommands+0x8>
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	3730      	adds	r7, #48	; 0x30
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	24004ce0 	.word	0x24004ce0

08009de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dea:	e048      	b.n	8009e7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dec:	4b2d      	ldr	r3, [pc, #180]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df6:	4b2b      	ldr	r3, [pc, #172]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fd feb3 	bl	8007b70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e18:	f003 0304 	and.w	r3, r3, #4
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d02e      	beq.n	8009e7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4413      	add	r3, r2
 8009e28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e2a:	68ba      	ldr	r2, [r7, #8]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d90e      	bls.n	8009e50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e3e:	4b19      	ldr	r3, [pc, #100]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4619      	mov	r1, r3
 8009e48:	4610      	mov	r0, r2
 8009e4a:	f7fd fe58 	bl	8007afe <vListInsert>
 8009e4e:	e016      	b.n	8009e7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e50:	2300      	movs	r3, #0
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7ff fd60 	bl	8009920 <xTimerGenericCommand>
 8009e60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	603b      	str	r3, [r7, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	e7fe      	b.n	8009e7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1b1      	bne.n	8009dec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e88:	4b06      	ldr	r3, [pc, #24]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e8e:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <prvSwitchTimerLists+0xc0>)
 8009e94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e96:	4a04      	ldr	r2, [pc, #16]	; (8009ea8 <prvSwitchTimerLists+0xc4>)
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	6013      	str	r3, [r2, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	24004cd8 	.word	0x24004cd8
 8009ea8:	24004cdc 	.word	0x24004cdc

08009eac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eb2:	f7fd ffb7 	bl	8007e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eb6:	4b15      	ldr	r3, [pc, #84]	; (8009f0c <prvCheckForValidListAndQueue+0x60>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d120      	bne.n	8009f00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ebe:	4814      	ldr	r0, [pc, #80]	; (8009f10 <prvCheckForValidListAndQueue+0x64>)
 8009ec0:	f7fd fdcc 	bl	8007a5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ec4:	4813      	ldr	r0, [pc, #76]	; (8009f14 <prvCheckForValidListAndQueue+0x68>)
 8009ec6:	f7fd fdc9 	bl	8007a5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009eca:	4b13      	ldr	r3, [pc, #76]	; (8009f18 <prvCheckForValidListAndQueue+0x6c>)
 8009ecc:	4a10      	ldr	r2, [pc, #64]	; (8009f10 <prvCheckForValidListAndQueue+0x64>)
 8009ece:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ed0:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <prvCheckForValidListAndQueue+0x70>)
 8009ed2:	4a10      	ldr	r2, [pc, #64]	; (8009f14 <prvCheckForValidListAndQueue+0x68>)
 8009ed4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <prvCheckForValidListAndQueue+0x74>)
 8009edc:	4a11      	ldr	r2, [pc, #68]	; (8009f24 <prvCheckForValidListAndQueue+0x78>)
 8009ede:	2110      	movs	r1, #16
 8009ee0:	200a      	movs	r0, #10
 8009ee2:	f7fe f929 	bl	8008138 <xQueueGenericCreateStatic>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	4a08      	ldr	r2, [pc, #32]	; (8009f0c <prvCheckForValidListAndQueue+0x60>)
 8009eea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009eec:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <prvCheckForValidListAndQueue+0x60>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <prvCheckForValidListAndQueue+0x60>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	490b      	ldr	r1, [pc, #44]	; (8009f28 <prvCheckForValidListAndQueue+0x7c>)
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fd42 	bl	8008984 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f00:	f7fd ffc0 	bl	8007e84 <vPortExitCritical>
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	24004ce0 	.word	0x24004ce0
 8009f10:	24004cb0 	.word	0x24004cb0
 8009f14:	24004cc4 	.word	0x24004cc4
 8009f18:	24004cd8 	.word	0x24004cd8
 8009f1c:	24004cdc 	.word	0x24004cdc
 8009f20:	24004d8c 	.word	0x24004d8c
 8009f24:	24004cec 	.word	0x24004cec
 8009f28:	0800a174 	.word	0x0800a174

08009f2c <__libc_init_array>:
 8009f2c:	b570      	push	{r4, r5, r6, lr}
 8009f2e:	4d0d      	ldr	r5, [pc, #52]	; (8009f64 <__libc_init_array+0x38>)
 8009f30:	4c0d      	ldr	r4, [pc, #52]	; (8009f68 <__libc_init_array+0x3c>)
 8009f32:	1b64      	subs	r4, r4, r5
 8009f34:	10a4      	asrs	r4, r4, #2
 8009f36:	2600      	movs	r6, #0
 8009f38:	42a6      	cmp	r6, r4
 8009f3a:	d109      	bne.n	8009f50 <__libc_init_array+0x24>
 8009f3c:	4d0b      	ldr	r5, [pc, #44]	; (8009f6c <__libc_init_array+0x40>)
 8009f3e:	4c0c      	ldr	r4, [pc, #48]	; (8009f70 <__libc_init_array+0x44>)
 8009f40:	f000 f8f2 	bl	800a128 <_init>
 8009f44:	1b64      	subs	r4, r4, r5
 8009f46:	10a4      	asrs	r4, r4, #2
 8009f48:	2600      	movs	r6, #0
 8009f4a:	42a6      	cmp	r6, r4
 8009f4c:	d105      	bne.n	8009f5a <__libc_init_array+0x2e>
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f54:	4798      	blx	r3
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7ee      	b.n	8009f38 <__libc_init_array+0xc>
 8009f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f5e:	4798      	blx	r3
 8009f60:	3601      	adds	r6, #1
 8009f62:	e7f2      	b.n	8009f4a <__libc_init_array+0x1e>
 8009f64:	08012300 	.word	0x08012300
 8009f68:	08012300 	.word	0x08012300
 8009f6c:	08012300 	.word	0x08012300
 8009f70:	08012304 	.word	0x08012304

08009f74 <__retarget_lock_acquire_recursive>:
 8009f74:	4770      	bx	lr

08009f76 <__retarget_lock_release_recursive>:
 8009f76:	4770      	bx	lr

08009f78 <memcpy>:
 8009f78:	440a      	add	r2, r1
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f80:	d100      	bne.n	8009f84 <memcpy+0xc>
 8009f82:	4770      	bx	lr
 8009f84:	b510      	push	{r4, lr}
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f8e:	4291      	cmp	r1, r2
 8009f90:	d1f9      	bne.n	8009f86 <memcpy+0xe>
 8009f92:	bd10      	pop	{r4, pc}

08009f94 <memset>:
 8009f94:	4402      	add	r2, r0
 8009f96:	4603      	mov	r3, r0
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d100      	bne.n	8009f9e <memset+0xa>
 8009f9c:	4770      	bx	lr
 8009f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009fa2:	e7f9      	b.n	8009f98 <memset+0x4>

08009fa4 <_free_r>:
 8009fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	d044      	beq.n	800a034 <_free_r+0x90>
 8009faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fae:	9001      	str	r0, [sp, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8009fb6:	bfb8      	it	lt
 8009fb8:	18e4      	addlt	r4, r4, r3
 8009fba:	f000 f8a9 	bl	800a110 <__malloc_lock>
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <_free_r+0x94>)
 8009fc0:	9801      	ldr	r0, [sp, #4]
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	b933      	cbnz	r3, 8009fd4 <_free_r+0x30>
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6014      	str	r4, [r2, #0]
 8009fca:	b003      	add	sp, #12
 8009fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fd0:	f000 b8a4 	b.w	800a11c <__malloc_unlock>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d908      	bls.n	8009fea <_free_r+0x46>
 8009fd8:	6825      	ldr	r5, [r4, #0]
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf01      	itttt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	1949      	addeq	r1, r1, r5
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	e7ed      	b.n	8009fc6 <_free_r+0x22>
 8009fea:	461a      	mov	r2, r3
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b10b      	cbz	r3, 8009ff4 <_free_r+0x50>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d9fa      	bls.n	8009fea <_free_r+0x46>
 8009ff4:	6811      	ldr	r1, [r2, #0]
 8009ff6:	1855      	adds	r5, r2, r1
 8009ff8:	42a5      	cmp	r5, r4
 8009ffa:	d10b      	bne.n	800a014 <_free_r+0x70>
 8009ffc:	6824      	ldr	r4, [r4, #0]
 8009ffe:	4421      	add	r1, r4
 800a000:	1854      	adds	r4, r2, r1
 800a002:	42a3      	cmp	r3, r4
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	d1e0      	bne.n	8009fca <_free_r+0x26>
 800a008:	681c      	ldr	r4, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	6053      	str	r3, [r2, #4]
 800a00e:	4421      	add	r1, r4
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	e7da      	b.n	8009fca <_free_r+0x26>
 800a014:	d902      	bls.n	800a01c <_free_r+0x78>
 800a016:	230c      	movs	r3, #12
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	e7d6      	b.n	8009fca <_free_r+0x26>
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	1961      	adds	r1, r4, r5
 800a020:	428b      	cmp	r3, r1
 800a022:	bf04      	itt	eq
 800a024:	6819      	ldreq	r1, [r3, #0]
 800a026:	685b      	ldreq	r3, [r3, #4]
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	bf04      	itt	eq
 800a02c:	1949      	addeq	r1, r1, r5
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	6054      	str	r4, [r2, #4]
 800a032:	e7ca      	b.n	8009fca <_free_r+0x26>
 800a034:	b003      	add	sp, #12
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	24004de0 	.word	0x24004de0

0800a03c <cleanup_glue>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	460c      	mov	r4, r1
 800a040:	6809      	ldr	r1, [r1, #0]
 800a042:	4605      	mov	r5, r0
 800a044:	b109      	cbz	r1, 800a04a <cleanup_glue+0xe>
 800a046:	f7ff fff9 	bl	800a03c <cleanup_glue>
 800a04a:	4621      	mov	r1, r4
 800a04c:	4628      	mov	r0, r5
 800a04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a052:	f7ff bfa7 	b.w	8009fa4 <_free_r>
	...

0800a058 <_reclaim_reent>:
 800a058:	4b2c      	ldr	r3, [pc, #176]	; (800a10c <_reclaim_reent+0xb4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4283      	cmp	r3, r0
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	4604      	mov	r4, r0
 800a062:	d051      	beq.n	800a108 <_reclaim_reent+0xb0>
 800a064:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a066:	b143      	cbz	r3, 800a07a <_reclaim_reent+0x22>
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d14a      	bne.n	800a104 <_reclaim_reent+0xac>
 800a06e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a070:	6819      	ldr	r1, [r3, #0]
 800a072:	b111      	cbz	r1, 800a07a <_reclaim_reent+0x22>
 800a074:	4620      	mov	r0, r4
 800a076:	f7ff ff95 	bl	8009fa4 <_free_r>
 800a07a:	6961      	ldr	r1, [r4, #20]
 800a07c:	b111      	cbz	r1, 800a084 <_reclaim_reent+0x2c>
 800a07e:	4620      	mov	r0, r4
 800a080:	f7ff ff90 	bl	8009fa4 <_free_r>
 800a084:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a086:	b111      	cbz	r1, 800a08e <_reclaim_reent+0x36>
 800a088:	4620      	mov	r0, r4
 800a08a:	f7ff ff8b 	bl	8009fa4 <_free_r>
 800a08e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a090:	b111      	cbz	r1, 800a098 <_reclaim_reent+0x40>
 800a092:	4620      	mov	r0, r4
 800a094:	f7ff ff86 	bl	8009fa4 <_free_r>
 800a098:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a09a:	b111      	cbz	r1, 800a0a2 <_reclaim_reent+0x4a>
 800a09c:	4620      	mov	r0, r4
 800a09e:	f7ff ff81 	bl	8009fa4 <_free_r>
 800a0a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a0a4:	b111      	cbz	r1, 800a0ac <_reclaim_reent+0x54>
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff ff7c 	bl	8009fa4 <_free_r>
 800a0ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a0ae:	b111      	cbz	r1, 800a0b6 <_reclaim_reent+0x5e>
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff ff77 	bl	8009fa4 <_free_r>
 800a0b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a0b8:	b111      	cbz	r1, 800a0c0 <_reclaim_reent+0x68>
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f7ff ff72 	bl	8009fa4 <_free_r>
 800a0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c2:	b111      	cbz	r1, 800a0ca <_reclaim_reent+0x72>
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff ff6d 	bl	8009fa4 <_free_r>
 800a0ca:	69a3      	ldr	r3, [r4, #24]
 800a0cc:	b1e3      	cbz	r3, 800a108 <_reclaim_reent+0xb0>
 800a0ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4798      	blx	r3
 800a0d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a0d6:	b1b9      	cbz	r1, 800a108 <_reclaim_reent+0xb0>
 800a0d8:	4620      	mov	r0, r4
 800a0da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a0de:	f7ff bfad 	b.w	800a03c <cleanup_glue>
 800a0e2:	5949      	ldr	r1, [r1, r5]
 800a0e4:	b941      	cbnz	r1, 800a0f8 <_reclaim_reent+0xa0>
 800a0e6:	3504      	adds	r5, #4
 800a0e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0ea:	2d80      	cmp	r5, #128	; 0x80
 800a0ec:	68d9      	ldr	r1, [r3, #12]
 800a0ee:	d1f8      	bne.n	800a0e2 <_reclaim_reent+0x8a>
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff ff57 	bl	8009fa4 <_free_r>
 800a0f6:	e7ba      	b.n	800a06e <_reclaim_reent+0x16>
 800a0f8:	680e      	ldr	r6, [r1, #0]
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff ff52 	bl	8009fa4 <_free_r>
 800a100:	4631      	mov	r1, r6
 800a102:	e7ef      	b.n	800a0e4 <_reclaim_reent+0x8c>
 800a104:	2500      	movs	r5, #0
 800a106:	e7ef      	b.n	800a0e8 <_reclaim_reent+0x90>
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	bf00      	nop
 800a10c:	24000024 	.word	0x24000024

0800a110 <__malloc_lock>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__malloc_lock+0x8>)
 800a112:	f7ff bf2f 	b.w	8009f74 <__retarget_lock_acquire_recursive>
 800a116:	bf00      	nop
 800a118:	24004ddc 	.word	0x24004ddc

0800a11c <__malloc_unlock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_unlock+0x8>)
 800a11e:	f7ff bf2a 	b.w	8009f76 <__retarget_lock_release_recursive>
 800a122:	bf00      	nop
 800a124:	24004ddc 	.word	0x24004ddc

0800a128 <_init>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	bf00      	nop
 800a12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12e:	bc08      	pop	{r3}
 800a130:	469e      	mov	lr, r3
 800a132:	4770      	bx	lr

0800a134 <_fini>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr
